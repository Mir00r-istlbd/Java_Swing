/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.faisal.tm;

import com.faisal.tm.CSD550E.CSD200Library;
import com.faisal.tm.CSD550E.CSD200Library.ICG4_CallbackPreviewImage;
import com.faisal.tm.CSD550E.CSD200Library.ICG4_CallbackResultImage;
import com.faisal.tm.CSD550E.Utils;
import com.faisal.tm.data.FPData;
import com.faisal.tm.geom.FPSegment;
import com.faisal.tm.worker.DialogWorker;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author User
 */
public class FPView extends javax.swing.JFrame implements WindowListener,ISegmentFingerprint,ICaptureObserver,IComputeQualityScore
{

    static
    {
        Native.setProtected(true);
    }
    
    /**
     * Creates new form FPView
     */
    private static FPView fpView = null;
    private static MyCanvas mCanvas = null;
    private CSD200Library csdLibrary = null;
    private ICG4_CallbackPreviewImage previewImageCallback = null;
    private ICG4_CallbackResultImage resultImageCallback = null;
    
    private FPData leftFPData = null;
    private FPData rightFPData = null;
    private FPData thumbFPData = null;
    
    private int fingerCnt = 0;
    private int whichFinger =0;
    
    public FPView() 
    {
        initComponents();
        mCanvas = new MyCanvas();
        mCanvas.setBounds(new Rectangle(2,2,previewPanel.getWidth()-4,previewPanel.getHeight()-4));
        previewPanel.add(mCanvas);
        
        leftFPData = new FPData();
        rightFPData = new FPData();
        thumbFPData = new FPData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        status = new javax.swing.JLabel();
        captureBtn = new javax.swing.JButton();
        previewPanel = new javax.swing.JPanel();
        leftRingSelected = new javax.swing.JRadioButton();
        leftSmallSelected = new javax.swing.JRadioButton();
        thumbsSelected = new javax.swing.JRadioButton();
        rightSmallSelected = new javax.swing.JRadioButton();
        rightFingersSelected = new javax.swing.JRadioButton();
        leftThumbSelected = new javax.swing.JRadioButton();
        rightIndexSelected = new javax.swing.JRadioButton();
        rightMiddleSelected = new javax.swing.JRadioButton();
        rightThumbSelected = new javax.swing.JRadioButton();
        leftMiddleSelected = new javax.swing.JRadioButton();
        leftFingersSelected = new javax.swing.JRadioButton();
        leftIndexSelected = new javax.swing.JRadioButton();
        rightRingSelected = new javax.swing.JRadioButton();
        lsImg = new javax.swing.JLabel();
        lrImg = new javax.swing.JLabel();
        lmImg = new javax.swing.JLabel();
        liImg = new javax.swing.JLabel();
        rsImg = new javax.swing.JLabel();
        rmImg = new javax.swing.JLabel();
        riImg = new javax.swing.JLabel();
        rrImg = new javax.swing.JLabel();
        ltImg = new javax.swing.JLabel();
        rtImg = new javax.swing.JLabel();
        rslbl = new javax.swing.JLabel();
        rrlbl = new javax.swing.JLabel();
        rmlbl = new javax.swing.JLabel();
        rilbl = new javax.swing.JLabel();
        lilbl = new javax.swing.JLabel();
        lslbl = new javax.swing.JLabel();
        lmlbl = new javax.swing.JLabel();
        lrlbl = new javax.swing.JLabel();
        ltlbl = new javax.swing.JLabel();
        rtlbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        status.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        status.setAlignmentX(0.5F);

        captureBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        captureBtn.setText("CAPTURE");
        captureBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCaptureClick(evt);
            }
        });

        previewPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 559, Short.MAX_VALUE)
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        buttonGroup1.add(leftRingSelected);
        leftRingSelected.setText("Left Ring");

        buttonGroup1.add(leftSmallSelected);
        leftSmallSelected.setText("Left Small");

        buttonGroup1.add(thumbsSelected);
        thumbsSelected.setText("Thumbs");

        buttonGroup1.add(rightSmallSelected);
        rightSmallSelected.setText("Right Small");

        buttonGroup1.add(rightFingersSelected);
        rightFingersSelected.setText("Right Fingers");

        buttonGroup1.add(leftThumbSelected);
        leftThumbSelected.setText("Left Thumb");

        buttonGroup1.add(rightIndexSelected);
        rightIndexSelected.setText("Right Index");

        buttonGroup1.add(rightMiddleSelected);
        rightMiddleSelected.setText("Right Middle");

        buttonGroup1.add(rightThumbSelected);
        rightThumbSelected.setText("Right Thumb");

        buttonGroup1.add(leftMiddleSelected);
        leftMiddleSelected.setText("Left Middle");

        buttonGroup1.add(leftFingersSelected);
        leftFingersSelected.setSelected(true);
        leftFingersSelected.setText("Left Fingers");

        buttonGroup1.add(leftIndexSelected);
        leftIndexSelected.setText("Left Index");

        buttonGroup1.add(rightRingSelected);
        rightRingSelected.setText("Right Ring");

        lsImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        lsImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lrImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        lrImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lmImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        lmImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        liImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        liImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        rsImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        rsImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        rmImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        rmImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        riImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        riImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        rrImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        rrImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        ltImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        ltImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        rtImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/faisal/tm/images.png"))); // NOI18N
        rtImg.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        rslbl.setText("Right Small");

        rrlbl.setText("Right Ring");

        rmlbl.setText("Right Middle");

        rilbl.setText("Right Index");

        lilbl.setText("Left Index");

        lslbl.setText("Left Small");

        lmlbl.setText("Left Middle");

        lrlbl.setText("Left Ring");

        ltlbl.setText("Left Thumb");

        rtlbl.setText("Right Thumb");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(356, 356, 356)
                        .addComponent(captureBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leftFingersSelected)
                            .addComponent(rightFingersSelected)
                            .addComponent(thumbsSelected)
                            .addComponent(leftSmallSelected)
                            .addComponent(leftRingSelected)
                            .addComponent(leftMiddleSelected)
                            .addComponent(leftIndexSelected)
                            .addComponent(leftThumbSelected)
                            .addComponent(rightThumbSelected)
                            .addComponent(rightIndexSelected)
                            .addComponent(rightMiddleSelected)
                            .addComponent(rightRingSelected)
                            .addComponent(rightSmallSelected))
                        .addGap(18, 18, 18)
                        .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lsImg, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lrImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lmImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(liImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rsImg, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rrImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rmImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(riImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ltImg, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rtImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(rslbl)
                                .addGap(55, 55, 55)
                                .addComponent(rrlbl)
                                .addGap(48, 48, 48)
                                .addComponent(rmlbl)
                                .addGap(44, 44, 44)
                                .addComponent(rilbl))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(lslbl)
                                .addGap(61, 61, 61)
                                .addComponent(lrlbl)
                                .addGap(56, 56, 56)
                                .addComponent(lmlbl)
                                .addGap(56, 56, 56)
                                .addComponent(lilbl))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(ltlbl)
                                .addGap(52, 52, 52)
                                .addComponent(rtlbl))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(leftFingersSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightFingersSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thumbsSelected)
                        .addGap(36, 36, 36)
                        .addComponent(leftSmallSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leftRingSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leftMiddleSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leftIndexSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leftThumbSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightThumbSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightIndexSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightMiddleSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightRingSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightSmallSelected)
                        .addGap(59, 59, 59))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(previewPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rsImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rrImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rmImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(riImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rslbl)
                                    .addComponent(rrlbl)
                                    .addComponent(rmlbl)
                                    .addComponent(rilbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lrImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lsImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lmImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(liImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lslbl)
                                    .addComponent(lrlbl)
                                    .addComponent(lmlbl)
                                    .addComponent(lilbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ltImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rtImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ltlbl)
                                    .addComponent(rtlbl))))
                        .addGap(20, 20, 20)))
                .addComponent(captureBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onCaptureClick(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCaptureClick
        
        int nRc = 0;
        
        
        IntByReference resultWidth = new IntByReference();
       //// resultWidth.setValue(0);
        
        IntByReference resultHeight = new IntByReference();
        ///resultHeight.setValue(0);
        
        IntByReference baseResolutionX = new IntByReference();
        ///baseResolutionX.setValue(0);
        
        IntByReference baseResolutionY = new IntByReference();
        ///baseResolutionY.setValue(0);
        
        if(previewImageCallback!=null)
        {
            nRc = csdLibrary.CG4_Capture_RegisterCallbackPreviewImage(previewImageCallback, (Pointer) null);        
        }
        
        if(resultImageCallback!=null)
        {
            nRc = csdLibrary.CG4_Capture_RegisterCallbackResultImage(resultImageCallback, (Pointer) null);
        }
                                
        int imageType = CSD200Library.CG4ImageType.CG4_FLAT_LEFT_FINGERS;        
        int numberOfObjects=4;
        
        if(this.leftFingersSelected.isSelected())
        {
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_LEFT_FINGERS;
            numberOfObjects=4;
            this.resetLeftFingerIcons();
            updateLabel("Please place left fingers on scanner...");
        }
        if(this.rightFingersSelected.isSelected())
        {
            this.resetRightFingerIcons();
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_FINGERS;
            numberOfObjects=4;
            updateLabel("Please place right fingers on scanner...");
        }else if(this.thumbsSelected.isSelected())
        {
            this.resetThumbFingerIcons();
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_TWO_THUMBS;
            numberOfObjects=2;
            updateLabel("Please place two thumbs on scanner...");
        }else if(this.leftSmallSelected.isSelected())
        {
            this.resetLabelIcon(lsImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_LEFT_SMALL;
            numberOfObjects=1;
            updateLabel("Please place left small finger on scanner...");
        }else if(this.leftRingSelected.isSelected())
        {
            this.resetLabelIcon(lrImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_LEFT_RING;
            numberOfObjects=1;
            updateLabel("Please place left ring finger on scanner...");
        }else if(this.leftMiddleSelected.isSelected())
        {
            this.resetLabelIcon(lmImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_LEFT_MIDDLE;
            numberOfObjects=1;
            updateLabel("Please place left middle finger on scanner...");
        }else if(this.leftIndexSelected.isSelected())
        {
            this.resetLabelIcon(liImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_LEFT_INDEX;
            numberOfObjects=1;
            updateLabel("Please place left index finger on scanner...");
        }else if(this.leftThumbSelected.isSelected())
        {
            this.resetLabelIcon(ltImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_LEFT_THUMB;
            numberOfObjects=1;
            updateLabel("Please place left thumb finger on scanner...");
        }else if(this.rightSmallSelected.isSelected())
        {
            this.resetLabelIcon(rsImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_SMALL;
            numberOfObjects=1;
            updateLabel("Please place right small finger on scanner...");
        }else if(this.rightRingSelected.isSelected())
        {
            this.resetLabelIcon(rrImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_RING;
            numberOfObjects=1;
            updateLabel("Please place right ring finger on scanner...");
        }else if(this.rightMiddleSelected.isSelected())
        {
            this.resetLabelIcon(rmImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_MIDDLE;
            numberOfObjects=1;
            updateLabel("Please place right middle finger on scanner...");
        }else if(this.rightIndexSelected.isSelected())
        {
            this.resetLabelIcon(riImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_INDEX;
            numberOfObjects=1;
            updateLabel("Please place right index finger on scanner...");
        }else if(this.rightThumbSelected.isSelected())
        {
            this.resetLabelIcon(rtImg);
            imageType = CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_THUMB;
            numberOfObjects=1;
            updateLabel("Please place right thumb finger on scanner...");
        }
        
        this.setFingerCnt(numberOfObjects);
        this.setWhichFinger(imageType);
        
        if (nRc != CSD200Library.ReturnCodes.CG4_STATUS_OK)
        {
          updateLabel("Capture failed. Error Code: " + nRc);
        }
        else
        {
          csdLibrary.CG4_Controls_SetLEDs(CSD200Library.CG4LedType.CG4_LED_EXTEND, 1);
          
          nRc = csdLibrary.CG4_Capture_SetMode(
                  imageType, 
                  CSD200Library.CG4ImageResolution.CG4_IMAGE_RESOLUTION_500, 
                  (byte)1,
                  (byte) 0,
                  resultWidth,
                  resultHeight, 
                  baseResolutionX, 
                  baseResolutionY
                  );
          
          if(nRc != CSD200Library.ReturnCodes.CG4_STATUS_OK)
          {
                updateLabel("Capture failed. Error Code: " + nRc);
          }
          else
          {
            nRc = csdLibrary.CG4_Capture_Start(numberOfObjects, (byte)1);
            if (nRc != CSD200Library.ReturnCodes.CG4_STATUS_OK)
            {
              csdLibrary.CG4_Capture_Abort();
              csdLibrary.CG4_Controls_SetLEDs(CSD200Library.CG4LedType.CG4_LED_EXTEND, 0);
              updateLabel("Capture failed. Error Code: " +nRc);
            }/*else
            {
               SegmentFingerprint seFp = new  SegmentFingerprint(this);
               seFp.start();
            }*/
          }
        }                
    }//GEN-LAST:event_onCaptureClick

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FPView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() 
            {
               fpView = new FPView();
               fpView.addWindowListener(fpView);
               fpView.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton captureBtn;
    private javax.swing.JRadioButton leftFingersSelected;
    private javax.swing.JRadioButton leftIndexSelected;
    private javax.swing.JRadioButton leftMiddleSelected;
    private javax.swing.JRadioButton leftRingSelected;
    private javax.swing.JRadioButton leftSmallSelected;
    private javax.swing.JRadioButton leftThumbSelected;
    private javax.swing.JLabel liImg;
    private javax.swing.JLabel lilbl;
    private javax.swing.JLabel lmImg;
    private javax.swing.JLabel lmlbl;
    private javax.swing.JLabel lrImg;
    private javax.swing.JLabel lrlbl;
    private javax.swing.JLabel lsImg;
    private javax.swing.JLabel lslbl;
    private javax.swing.JLabel ltImg;
    private javax.swing.JLabel ltlbl;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JLabel riImg;
    private javax.swing.JRadioButton rightFingersSelected;
    private javax.swing.JRadioButton rightIndexSelected;
    private javax.swing.JRadioButton rightMiddleSelected;
    private javax.swing.JRadioButton rightRingSelected;
    private javax.swing.JRadioButton rightSmallSelected;
    private javax.swing.JRadioButton rightThumbSelected;
    private javax.swing.JLabel rilbl;
    private javax.swing.JLabel rmImg;
    private javax.swing.JLabel rmlbl;
    private javax.swing.JLabel rrImg;
    private javax.swing.JLabel rrlbl;
    private javax.swing.JLabel rsImg;
    private javax.swing.JLabel rslbl;
    private javax.swing.JLabel rtImg;
    private javax.swing.JLabel rtlbl;
    private javax.swing.JLabel status;
    private javax.swing.JRadioButton thumbsSelected;
    // End of variables declaration//GEN-END:variables
        
    
    public void updateLabel(String txt)
    {
        status.setText(txt);
        this.repaint();
        
    }
    
    @Override
    public void windowOpened(WindowEvent e) 
    {
        int nRc = -1;
                                
        try
        {            
            updateLabel("Initializing Device.");
            
            csdLibrary = (CSD200Library)LibraryLoader.getLibrary("CG4EssentialsApi","com.faisal.tm.CSD550E.CSD200Library");
            
            csdLibrary.CG4_Main_DeInitialize();
            
            nRc = csdLibrary.CG4_Main_Initialize(502);
            
            
            if(nRc != CSD200Library.ReturnCodes.CG4_STATUS_OK)
            {
              updateLabel("Scanner initialization failed. Error Code: " + nRc);
            }
            else
            {
                
              updateLabel("Calibrating the fingerprint scanner.....\nPlease do not place finger on scanner");
              
              csdLibrary.CG4_Controls_SetLEDs(CSD200Library.CG4LedType.CG4_LED_EXTEND, 1);
              
              nRc = csdLibrary.CG4_Capture_Calibration();
              if (nRc != CSD200Library.ReturnCodes.CG4_STATUS_OK)
              {
                updateLabel("3M Cogent CSD200 scanner calibration failed. Error Code: " +nRc);
              }
              
              csdLibrary.CG4_Controls_SetLEDs(CSD200Library.CG4LedType.CG4_LED_EXTEND, 0);
              
              previewImageCallback = new CSD200Library.CG4_CallbackPreviewImage(this,csdLibrary);
              resultImageCallback = new CSD200Library.CG4_CallbackResultImage(this,csdLibrary);              
              
              updateLabel("Scanner initialized");                           
            }
            
        }catch(Exception exc)
        {
            updateLabel("Device initialization error. "+exc.getMessage());
        }
    }

    @Override
    public void windowClosing(WindowEvent e) 
    {
        try
        {
            previewImageCallback = null;
            resultImageCallback = null;
                
            if(csdLibrary!=null)
            {                
                csdLibrary.CG4_Main_DeInitialize();
            }
        }catch(Exception exc)
        {
        }
    }

    @Override
    public void windowClosed(WindowEvent e) 
    {
        
    }

    @Override
    public void windowIconified(WindowEvent e) 
    {
        
    }

    @Override
    public void windowDeiconified(WindowEvent e) 
    {
        
    }

    @Override
    public void windowActivated(WindowEvent e) 
    {
        
    }

    @Override
    public void windowDeactivated(WindowEvent e) 
    {
        
    }
    
    @Override
    public int getFingerCnt() {
        return fingerCnt;
    }

    public void setFingerCnt(int fingerCnt) {
        this.fingerCnt = fingerCnt;
    }

    public int getWhichFinger() {
        return whichFinger;
    }

    public void setWhichFinger(int whichFinger) {
        this.whichFinger = whichFinger;
    }    

    @Override
    public FPData getFPData() 
    {
        int wf = this.getWhichFinger();
        switch(wf)
        {            
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_FINGERS:
            return leftFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_FINGERS:
            return rightFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_TWO_THUMBS:
            return thumbFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_SMALL:
            return leftFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_RING:
            return leftFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_MIDDLE:
            return leftFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_INDEX:
            return leftFPData;	
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_THUMB:
            return leftFPData;	
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_SMALL:
            return rightFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_RING:
            return rightFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_MIDDLE:
            return rightFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_INDEX:
            return rightFPData;
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_THUMB:
            return rightFPData;
            default:
            return leftFPData; 
        }        
    }

    @Override
    public void setFPData(FPData fpData) 
    {
        int wf = this.getWhichFinger();
        switch(wf)
        {            
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_FINGERS:
                this.leftFPData = fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_FINGERS:
                this.rightFPData = fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_TWO_THUMBS:
                this.thumbFPData = fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_SMALL:
                this.leftFPData = fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_RING:
                this.leftFPData = fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_MIDDLE:
                this.leftFPData = fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_INDEX:
                this.leftFPData = fpData;	
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_THUMB:
                this.leftFPData = fpData;	
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_SMALL:
                this.rightFPData = fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_RING:
                this.rightFPData = fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_MIDDLE:
                this.rightFPData=fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_INDEX:
                this.rightFPData=fpData;
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_THUMB:
                this.rightFPData=fpData;
            break;    
            default:
                this.leftFPData=fpData; 
        }        
    }
    
    public void resetLabelIcon(JLabel lbl)
    {
        try
        {
            InputStream is = FPView.class.getResourceAsStream("images.png");
            BufferedImage bufferedImage = ImageIO.read(is);
            ImageIcon imageIcon = new ImageIcon(bufferedImage);
            lbl.setIcon(imageIcon);
        }catch(Exception exc)
        {
            exc.printStackTrace();
        }
    }
    
    public void resetLeftFingerIcons()
    {
        this.resetLabelIcon(lsImg);
        this.resetLabelIcon(lrImg);
        this.resetLabelIcon(lmImg);
        this.resetLabelIcon(liImg);
    }
    
    public void resetRightFingerIcons()
    {
        this.resetLabelIcon(rsImg);
        this.resetLabelIcon(rrImg);
        this.resetLabelIcon(rmImg);
        this.resetLabelIcon(riImg);
    }
    
    public void resetThumbFingerIcons()
    {
        this.resetLabelIcon(ltImg);
        this.resetLabelIcon(rtImg);        
    }
    
    public void setLabelIcon(JLabel lbl , FPSegment segment)
    {
        try
        {
            BufferedImage bi = Utils.getGrayscale(segment.getW(), segment.getH(), segment.getSegData());
            BufferedImage scaledImage = new BufferedImage(lbl.getWidth(), lbl.getHeight(), BufferedImage.TYPE_BYTE_GRAY); 
            // Paint scaled version of image to new image
            Graphics2D graphics2D = scaledImage.createGraphics();
            graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
            RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            graphics2D.drawImage(bi, 0, 0, lbl.getWidth(), lbl.getHeight(), null);
            // clean up
            graphics2D.dispose();
            
            ImageIcon icon = new ImageIcon(scaledImage);
            lbl.setIcon(icon);
        }catch(Exception exc)
        {
            exc.printStackTrace();
        }
    }
    
    
    public void setLeftFingerIcons()
    {
        FPSegment[] segments = this.leftFPData.getSegments();
        this.setLabelIcon(lsImg, segments[0]);
        this.setLabelIcon(lrImg, segments[1]);
        this.setLabelIcon(lmImg, segments[2]);
        this.setLabelIcon(liImg, segments[3]);
        
    }
    public void setRightFingerIcons()
    {
        FPSegment[] segments = this.rightFPData.getSegments();
        this.setLabelIcon(riImg, segments[0]);
        this.setLabelIcon(rmImg, segments[1]);
        this.setLabelIcon(rrImg, segments[2]);
        this.setLabelIcon(rsImg, segments[3]);        
    }
    public void setThumbFingerIcons()
    {
        FPSegment[] segments = this.thumbFPData.getSegments();
        this.setLabelIcon(ltImg, segments[0]);
        this.setLabelIcon(rtImg, segments[1]);        
    }
    @Override
    public void segmentationDone() 
    {
        int wf = this.whichFinger;
        
        switch(wf)
        {            
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_FINGERS:
            {
                this.setLeftFingerIcons();
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_FINGERS:
            {
                this.setRightFingerIcons();
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_TWO_THUMBS:
            {
                this.setThumbFingerIcons();
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_SMALL:
            {
                this.setLabelIcon(lslbl, this.leftFPData.getSegment(0));                
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_RING:
            {
                this.setLabelIcon(lrlbl, this.leftFPData.getSegment(1));
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_MIDDLE:
            {
                this.setLabelIcon(lmlbl, this.leftFPData.getSegment(2));
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_INDEX:
            {
                this.setLabelIcon(lilbl, this.leftFPData.getSegment(3));
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_LEFT_THUMB:
            {
                this.setLabelIcon(ltlbl, this.thumbFPData.getSegment(0));
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_SMALL:
            {
                this.setLabelIcon(rslbl, this.rightFPData.getSegment(3));
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_RING:
            {
                this.setLabelIcon(rrlbl, this.rightFPData.getSegment(2));
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_MIDDLE:
            {
                this.setLabelIcon(rmlbl, this.rightFPData.getSegment(1));
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_INDEX:
            {
                this.setLabelIcon(rilbl, this.rightFPData.getSegment(0));
            }
            break;    
            case CSD200Library.CG4ImageType.CG4_FLAT_RIGHT_THUMB:
            {
                this.setLabelIcon(rslbl, this.thumbFPData.getSegment(1));
            }
            break;    
            default:
                this.setLeftFingerIcons(); 
        }
        
        updateLabel("Finger Print Quality Calculating. Please wait...");
        ComputeQualityScore qualityScore = new ComputeQualityScore(this);
        qualityScore.start();
    }

    @Override
    public void segmentationFailed(String errMsg) 
    {
        JOptionPane.showMessageDialog(null,"Segmentation Failed : "+errMsg, "Segmentation Message", JOptionPane.OK_OPTION);
    }

    @Override
    public Image getFPImage() 
    {
        return mCanvas.getFpImg();
    }

    @Override
    public void setFPImagePreview(Image img) 
    {
        mCanvas.setFpImg(img);
        mCanvas.repaint();
    }

    @Override
    public void setFPImageFinal(Image img) 
    {
        mCanvas.setFpImg(img);
        mCanvas.repaint();
    }

    @Override
    public void setCaptureDone() 
    {
          updateLabel("Segmenting fingerprints. Please wait...");  
          csdLibrary.CG4_Controls_SetLEDs(CSD200Library.CG4LedType.CG4_LED_EXTEND, 0); 
          SegmentFingerprint segFinger = new SegmentFingerprint(this);
          segFinger.start();
          
    }

    @Override
    public void qualityComputeDone() 
    {
         updateLabel("Finger Print Capture Completed.");
    }

    @Override
    public void qualityComputeFailed(String errMsg) 
    {
        JOptionPane.showMessageDialog(null,"Quality Computation Failed : "+errMsg, "QC Message", JOptionPane.OK_OPTION);
    }
        
}
