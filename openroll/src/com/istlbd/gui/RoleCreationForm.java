/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.istlbd.gui;

import business.bean.OperationManagerBean;
import business.bean.RoleManagerBean;
import business.bean.RoleOperationManagerBean;
import business.bean.Utils;
import business.entity.BioOperations;
import business.entity.BioRole;
import business.entity.BioRoleOperation;
import com.istlbd.utils.Lookup;
//import static com.istlbd.gui.RoleCreateFormOld.roleDescriptionCreateField;
//import static com.istlbd.gui.RoleCreateFormOld.roleNameCreateField;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import remote.dao.ServiceException;
import ws.response.GetOperationSummaryResponse;
import ws.response.GetRoleSummaryResponse;

/**
 *
 * @author User
 */
public class RoleCreationForm extends javax.swing.JFrame {

    /**
     * Creates new form RoleCreationForm
     */
    
    private ListModel checkBoxModel = null;
    
    public RoleCreationForm() {
        
        prepareOperationList();
        
        initComponents();
        
        checkBoxModel = new ListModel();

        this.setTitle("Create/Edit Role");
        this.setLocationRelativeTo(null);
    }

    public void getRoleList() {
        GetRoleSummaryResponse resp = new GetRoleSummaryResponse();
        RoleManagerBean rmb = new RoleManagerBean();
        BioRole role = new BioRole();
        resp = rmb.getAdvancedSearchRoleInfo(0L, 100L, role);
        if (resp != null && resp.isOperationStatus() && resp.getRoleList() != null && resp.getRoleList().size() > 0) {
        } else {
            Utils.showErrorMsg("Failed to get role list");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        role_creation_content_panel = new javax.swing.JPanel();
        lbl_role_name = new javax.swing.JLabel();
        lbl_role_desc = new javax.swing.JLabel();
        inp_role_name = new javax.swing.JTextField();
        scr_role_desc = new javax.swing.JScrollPane();
        txt_role_desc = new javax.swing.JTextArea();
        scr_operations = new javax.swing.JScrollPane();
        listModel1 = new com.istlbd.gui.ListModel();
        btn_close = new javax.swing.JButton();
        btn_save_role = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 300));
        setMinimumSize(new java.awt.Dimension(600, 300));
        setName("Create Role"); // NOI18N
        setResizable(false);

        role_creation_content_panel.setMaximumSize(new java.awt.Dimension(600, 250));
        role_creation_content_panel.setMinimumSize(new java.awt.Dimension(600, 250));
        role_creation_content_panel.setPreferredSize(new java.awt.Dimension(600, 250));
        role_creation_content_panel.setLayout(null);

        lbl_role_name.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbl_role_name.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_role_name.setText("Role Description");
        role_creation_content_panel.add(lbl_role_name);
        lbl_role_name.setBounds(10, 90, 100, 30);

        lbl_role_desc.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbl_role_desc.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_role_desc.setText("Role Name");
        role_creation_content_panel.add(lbl_role_desc);
        lbl_role_desc.setBounds(10, 50, 100, 30);
        role_creation_content_panel.add(inp_role_name);
        inp_role_name.setBounds(120, 50, 150, 30);

        txt_role_desc.setColumns(20);
        txt_role_desc.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txt_role_desc.setLineWrap(true);
        txt_role_desc.setRows(5);
        txt_role_desc.setWrapStyleWord(true);
        scr_role_desc.setViewportView(txt_role_desc);

        role_creation_content_panel.add(scr_role_desc);
        scr_role_desc.setBounds(120, 90, 150, 91);

        scr_operations.setMaximumSize(new java.awt.Dimension(240, 210));
        scr_operations.setMinimumSize(new java.awt.Dimension(240, 210));
        scr_operations.setPreferredSize(new java.awt.Dimension(240, 210));
        scr_operations.setViewportView(listModel1);

        role_creation_content_panel.add(scr_operations);
        scr_operations.setBounds(290, 50, 280, 132);

        btn_close.setText("CLOSE");
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });
        role_creation_content_panel.add(btn_close);
        btn_close.setBounds(300, 200, 100, 30);

        btn_save_role.setText("SAVE");
        btn_save_role.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_save_roleActionPerformed(evt);
            }
        });
        role_creation_content_panel.add(btn_save_role);
        btn_save_role.setBounds(180, 200, 100, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(role_creation_content_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(role_creation_content_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        
        this.dispose();
        
    }//GEN-LAST:event_btn_closeActionPerformed

    private void btn_save_roleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_save_roleActionPerformed
        
        Lookup.roleData.setRolename(inp_role_name.getText());

        Lookup.roleData.setRoleDescription(txt_role_desc.getText());



        Object obj = new Object();

        RoleManagerBean rmb = new RoleManagerBean();
        try {
            obj = rmb.createUpdateRole(Lookup.roleData);
        } catch (ServiceException se) {
            System.out.println("error occurred during user saved");
            Utils.showErrorMsg("Error Occured.\nRole not saved.\n" + se.getMessage());
        }

        if (obj != null && obj instanceof database.entity.BioRole) {
            System.out.println("success");
            database.entity.BioRole tmpRole = (database.entity.BioRole) obj;
            Lookup.roleData.setId(tmpRole.getId());
            Lookup.roleData.setRolename(tmpRole.getRolename());
            Lookup.roleData.setRoleDescription(tmpRole.getRoleDescription());
            Utils.showSuccessMsg("Role Saved Successfully");
        } else {
            System.out.println("error occurred during role creation");
            Utils.showErrorMsg("Error Occured.Role not saved.");

        }
        //checkBoxModel.

        // if operations are checked then insert them into RoleOperation table
        RoleOperationManagerBean romb = new RoleOperationManagerBean();
        List<Long> operationIdList = new ArrayList<Long>();
        int count = 0;
        for(String s : Lookup.checkedOperationList){
            for(BioOperations op : Lookup.OPERATION_LIST){
                if(s.equalsIgnoreCase(op.getOperationName())){
                    operationIdList.add(op.getId());
                }
            }
        }
        
        BioRoleOperation bioRoleOperationBO = new BioRoleOperation();
        bioRoleOperationBO.setRoleId(Lookup.roleData.getId());
        Object result = null;
        try {
            result = romb.createUpdateRoleOperation(bioRoleOperationBO, operationIdList);
        } catch (ServiceException se) {
            se.printStackTrace();
        }
        if(result!= null && !(result instanceof ServiceException)){
            Utils.showSuccessMsg("Role and Operation updated");
        }
        else 
            Utils.showErrorMsg("Role and Operation not updated");
        
    }//GEN-LAST:event_btn_save_roleActionPerformed

    static class CheckListRenderer extends JCheckBox implements ListCellRenderer {

        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean hasFocus) {
            setEnabled(list.isEnabled());
            setSelected(((CheckListItem) value).isSelected());
            setFont(list.getFont());
            setBackground(list.getBackground());
            setForeground(list.getForeground());
            setText(value.toString());
            return this;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoleCreationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoleCreationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoleCreationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoleCreationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RoleCreationForm rcf = new RoleCreationForm();
                rcf.setVisible(true);
                rcf.setLocationRelativeTo(null);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_save_role;
    public static javax.swing.JTextField inp_role_name;
    private javax.swing.JLabel lbl_role_desc;
    private javax.swing.JLabel lbl_role_name;
    private com.istlbd.gui.ListModel listModel1;
    private javax.swing.JPanel role_creation_content_panel;
    private javax.swing.JScrollPane scr_operations;
    private javax.swing.JScrollPane scr_role_desc;
    public static javax.swing.JTextArea txt_role_desc;
    // End of variables declaration//GEN-END:variables
    
public static void setSelectedValueRole(JComboBox comboBox, String value) {
        String desc = "";
        for (database.entity.BioRole dv : Lookup.ROLE_LIST) {
            if (dv.getId().toString().equalsIgnoreCase(value)) {
                desc = dv.getRolename();
                break;
            }
        }

        if (desc == "") {
            return;
        }

        for (int i = 0; i < comboBox.getItemCount(); i++) {
            String val = (String) comboBox.getItemAt(i).toString();
            if (val.equalsIgnoreCase(desc)) {
                comboBox.setSelectedIndex(i);
                break;
            }
        }
    }
    
    public void setSelectedCheckBox(){
//        BioRoleOperation bioRoleOperation = new BioRoleOperation();
//        bioRoleOperation.setRoleId(Lookup.roleData.getId());
//        RoleOperationManagerBean romb = new RoleOperationManagerBean();
//        Lookup.ROLE_OPERATION_LIST = new ArrayList<BioRoleOperation>();
//        GetRoleOperationSummaryResponse resp = romb.getAdvancedSearchRoleOperationInfo(-1L, -1L, bioRoleOperation);
//        Lookup.ROLE_OPERATION_LIST = resp.getRoleOperationList();
        
        //for(int i = 0; i< Lookup.OPERATION_LIST.size(); i++){
//                JCheckBox jb = checkBoxModel.model.get(count);
                for(BioRoleOperation bo : Lookup.ROLE_OPERATION_LIST){
                    int count = 0;
                    for(BioOperations b : Lookup.OPERATION_LIST){
                        if(bo.getOperationId() == b.getId().longValue()){
                            checkBoxModel.model.get(count).setSelected(true);
                            Lookup.checkedOperationList.add(checkBoxModel.model.get(count).getText());
                            checkBoxModel.repaint();
                        }
                        count++;
                    }
                    
                }
            //}
    }
    public void prepareOperationList() {
        GetOperationSummaryResponse resp = new GetOperationSummaryResponse();
        BioOperations operation = new BioOperations();
        OperationManagerBean opbm = new OperationManagerBean();
        resp = opbm.getAdvancedSearchOperationInfo(0L, 1000L, operation);
        Lookup.OPERATION_LIST = new ArrayList<BioOperations>();
        if (resp != null && resp.isOperationStatus() && resp.getOperationList() != null && resp.getOperationList().size() > 0) {
            
            Lookup.OPERATION_LIST = resp.getOperationList();
            int size = resp.getOperationList().size();
            
        }
    }
}
