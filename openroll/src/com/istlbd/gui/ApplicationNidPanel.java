/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.istlbd.gui;

import ImageProcessing.ImageAndFileProcessing;
import business.bean.PersonManagerBean;
import business.bean.Utils;
import business.entity.BioBiometric;
import business.entity.BioPerson;
import business.entity.Item;
import com.face.faisal.ICAOFaceInternalFrame;
import com.face.faisal.SignatureCaptureForm;
import com.faisal.iris.IrisUtils;
import client.bean.ApplicationData;
//import com.perp.Lookup.ComboItem;
import com.istlbd.utils.Defs;
import database.bean.AddressEntityManagerBean;
import database.bean.BioAttachmentEntityManagerBean;
import database.bean.DistrictJpaController;
import database.entity.Area;
import database.entity.BioAttachment;
import database.entity.City;
import database.entity.District;
import database.entity.Division;
import database.entity.Eunion;
import database.entity.Postoffice;
import database.entity.Upozila;
import database.entity.Village;
import database.entity.VoterArea;
import static com.istlbd.gui.ContainerJFrame.imagePanel1;
import com.istlbd.interfaces.IEnrollment;
import com.istlbd.processing.Enrollment;
import com.istlbd.utils.Lookup;
import static com.istlbd.utils.Lookup.RMO_LIST;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.jdesktop.xswingx.PromptSupport;
import org.jnbis.Bitmap;
import org.jnbis.WsqDecoder;
import ws.response.AddBioPersonResponse;
import ws.response.GetPersonSummaryResponse;

/**
 *
 * @author Maverick
 */
public class ApplicationNidPanel extends javax.swing.JPanel implements IEnrollment {

    private static byte[] smart_card_photo = null;
    public static ApplicationData applicationData = null;
//    private ArrayList<String> errorFields = null;
    private HashMap<String, Boolean> errorFieldsMap = null;
    private Color errorFieldBorderColor = new Color(255, 0, 0);
    private Color defaultFieldBorderColor = new Color(153, 153, 153);
    private String setted_present_district="";
    private String DIVISION_VALUE="";
    private String setted_present_upozila="";
    private String setted_present_postoffice="";
    private String DISTRICT_VALUE="";
    private String setted_present_city="";
    private String setted_present_eunion="";
    private String setted_present_mouza="";
    private String setted_present_village="";
    private String setted_permanent_district="";
    private String setted_permanent_upozila="";
    private String setted_permanent_postoffice="";
    private String setted_permanent_city="";
    private String setted_permanent_eunion="";
    private String setted_permanent_mouza="";
    private String setted_permanent_village="";

    public static byte[] getSmart_card_photo() {
        return smart_card_photo;
    }

    public static void setSmart_card_photo(byte[] smart_card_photo) {
        ApplicationNidPanel.smart_card_photo = smart_card_photo;
    }
    private static Font banglaFont = null;
    private String setted_present_rmo;
    private String setted_permanent_rmo;
    private String setted_voter_area;

    /**
     * Creates new form ApplicationPanel
     */
    public ApplicationNidPanel() {
        initComponents();
        setPlaceHolder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderButtonGroup = new javax.swing.ButtonGroup();
        content_panel = new javax.swing.JPanel();
        separator_biometric = new javax.swing.JSeparator();
        separator_personal_dtls = new javax.swing.JSeparator();
        lbl_biometric_header = new javax.swing.JLabel();
        lbl_citizenship_header = new javax.swing.JLabel();
        separator_citizenship = new javax.swing.JSeparator();
        lbl_address_header = new javax.swing.JLabel();
        lbl_name_bangla = new javax.swing.JLabel();
        inp_name_bangla = new javax.swing.JTextField();
        inp_name_english = new javax.swing.JTextField();
        lbl_name_english = new javax.swing.JLabel();
        inp_spouse_nid = new javax.swing.JTextField();
        lbl_name_spouse = new javax.swing.JLabel();
        inp_name_spouse = new javax.swing.JTextField();
        inp_name_mother = new javax.swing.JTextField();
        lbl_name_mother = new javax.swing.JLabel();
        inp_mother_nid = new javax.swing.JTextField();
        lbl_name_father = new javax.swing.JLabel();
        inp_father_nid = new javax.swing.JTextField();
        inp_name_father = new javax.swing.JTextField();
        inp_remark_fp = new javax.swing.JTextField();
        lbl_gender = new javax.swing.JLabel();
        inp_nid = new javax.swing.JTextField();
        lbl_national_id = new javax.swing.JLabel();
        lbl_nid_issue_date = new javax.swing.JLabel();
        lbl_certi_issue_dist = new javax.swing.JLabel();
        cmb_birth_place_district = new JComboBox<Item<String>>();
        rdo_gender_third = new javax.swing.JRadioButton();
        rdo_gender_female = new javax.swing.JRadioButton();
        lbl_marital_status = new javax.swing.JLabel();
        lbl_hadicap_header = new javax.swing.JLabel();
        separator_handicap = new javax.swing.JSeparator();
        chk_sd_other = new javax.swing.JCheckBox();
        chk_handicap_others = new javax.swing.JCheckBox();
        chk_handicap_amputant = new javax.swing.JCheckBox();
        chk_handicap_visual = new javax.swing.JCheckBox();
        chk_handicap_deaf = new javax.swing.JCheckBox();
        chk_handicap_mute = new javax.swing.JCheckBox();
        lbl_misc_header = new javax.swing.JLabel();
        separator_misc = new javax.swing.JSeparator();
        lbl_edu_occu_rel = new javax.swing.JLabel();
        inp_telephone = new javax.swing.JTextField();
        inp_mobile = new javax.swing.JTextField();
        lbl_pass_tin_drv = new javax.swing.JLabel();
        inp_email = new javax.swing.JTextField();
        rdo_gender_male = new javax.swing.JRadioButton();
        lbl_personal_dtls_header = new javax.swing.JLabel();
        separator_bio_horizontal = new javax.swing.JSeparator();
        lbl_signature = new javax.swing.JLabel();
        lbl_fp_lp = new javax.swing.JLabel();
        lbl_fp_lr = new javax.swing.JLabel();
        lbl_fp_lm = new javax.swing.JLabel();
        lbl_fp_li = new javax.swing.JLabel();
        lbl_fp_lt = new javax.swing.JLabel();
        lbl_fp_rp = new javax.swing.JLabel();
        lbl_fp_rr = new javax.swing.JLabel();
        lbl_fp_rm = new javax.swing.JLabel();
        lbl_fp_ri = new javax.swing.JLabel();
        lbl_fp_rt = new javax.swing.JLabel();
        lbl_fp_container_right = new javax.swing.JLabel();
        lbl_right_eye = new javax.swing.JLabel();
        chk_handicap_speech = new javax.swing.JCheckBox();
        lbl_documents_header = new javax.swing.JLabel();
        separator_docs = new javax.swing.JSeparator();
        chk_fp_not_ten_fingers = new javax.swing.JCheckBox();
        chk_sd_citizenship = new javax.swing.JCheckBox();
        chk_sd_marriage = new javax.swing.JCheckBox();
        chk_sd_transfer = new javax.swing.JCheckBox();
        chk_sd_utility = new javax.swing.JCheckBox();
        btn_attachment = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();
        btn_reset = new javax.swing.JButton();
        cmb_education = new javax.swing.JComboBox();
        cmb_religion = new javax.swing.JComboBox();
        inp_tin_no = new javax.swing.JTextField();
        inp_drv_license = new javax.swing.JTextField();
        inp_passport = new javax.swing.JTextField();
        cal_nid_issue_date = new com.toedter.calendar.JDateChooser();
        cal_date_of_birth = new com.toedter.calendar.JDateChooser();
        lbl_photo = new javax.swing.JLabel();
        lbl_left_eye = new javax.swing.JLabel();
        lbl_spouse_nid = new javax.swing.JLabel();
        cmb_marital_status = new javax.swing.JComboBox();
        lbl_father_nid = new javax.swing.JLabel();
        lbl_mother_nid = new javax.swing.JLabel();
        inp_nid_old = new javax.swing.JTextField();
        lbl_nid_old = new javax.swing.JLabel();
        inp_nationality = new javax.swing.JTextField();
        lbl_nationality = new javax.swing.JLabel();
        inp_birth_registration_no = new javax.swing.JTextField();
        lbl_add_voter_area = new javax.swing.JLabel();
        lbl_date_of_birth = new javax.swing.JLabel();
        cmb_blood_grp = new javax.swing.JComboBox();
        inp_uim = new javax.swing.JTextField();
        lbl_uim = new javax.swing.JLabel();
        separator_address = new javax.swing.JSeparator();
        cmb_profession = new javax.swing.JComboBox();
        lbl_tel_cell_mail = new javax.swing.JLabel();
        lbl_fp_container_left = new javax.swing.JLabel();
        lbll_fp_container = new javax.swing.JLabel();
        lbl_add_voter_at = new javax.swing.JLabel();
        lbl_blood_grp = new javax.swing.JLabel();
        scrp_handi_othern = new javax.swing.JScrollPane();
        txt_handicap_remarks = new javax.swing.JTextArea();
        scr_address = new javax.swing.JScrollPane();
        address_base_panel = new javax.swing.JPanel();
        lbl_present_add_header = new javax.swing.JLabel();
        separator_add_present = new javax.swing.JSeparator();
        present_add_panel = new javax.swing.JPanel();
        cmb_present_division = new JComboBox<Item<String>>();
        cmb_present_district = new javax.swing.JComboBox();
        cmb_present_upozila = new javax.swing.JComboBox();
        inp_present_mouza_otr = new javax.swing.JTextField();
        lbl_present_division = new javax.swing.JLabel();
        lbl_present_district = new javax.swing.JLabel();
        lbl_present_upozila = new javax.swing.JLabel();
        lbl_present_postcode = new javax.swing.JLabel();
        cmb_present_rmo = new javax.swing.JComboBox();
        lbl_present_city = new javax.swing.JLabel();
        cmb_present_city = new javax.swing.JComboBox();
        lbl_present_eunion = new javax.swing.JLabel();
        cmb_present_eunion = new javax.swing.JComboBox();
        lbl_present_postoffice = new javax.swing.JLabel();
        cmb_present_postoffice = new javax.swing.JComboBox();
        lbl_present_rmo = new javax.swing.JLabel();
        inp_present_postcode = new javax.swing.JTextField();
        lbl_present_mouza = new javax.swing.JLabel();
        cmb_present_mouza = new javax.swing.JComboBox();
        lbl_present_village = new javax.swing.JLabel();
        cmb_present_village = new javax.swing.JComboBox();
        inp_present_village_otr = new javax.swing.JTextField();
        lbl_present_house = new javax.swing.JLabel();
        inp_present_house = new javax.swing.JTextField();
        permanent_add_panel = new javax.swing.JPanel();
        cmb_permanent_district = new JComboBox<Item<String>>();
        cmb_permanent_division = new JComboBox<Item<String>>();
        cmb_permanent_upozila = new JComboBox<Item<String>>();
        inp_permanent_mouza_otr = new javax.swing.JTextField();
        lbl_permanent_division = new javax.swing.JLabel();
        lbl_permanent_district = new javax.swing.JLabel();
        lbl_permanent_upozila = new javax.swing.JLabel();
        lbl_permanent_postcode = new javax.swing.JLabel();
        cmb_permanent_rmo = new javax.swing.JComboBox();
        lbl_permanent_city = new javax.swing.JLabel();
        cmb_permanent_city = new javax.swing.JComboBox();
        lbl_permanent_eunion = new javax.swing.JLabel();
        cmb_permanent_eunion = new javax.swing.JComboBox();
        lbl_permanent_postoffice = new javax.swing.JLabel();
        cmb_permanent_postoffice = new javax.swing.JComboBox();
        lbl_permanent_rmo = new javax.swing.JLabel();
        inp_permanent_postcode = new javax.swing.JTextField();
        lbl_permanent_mouza = new javax.swing.JLabel();
        cmb_permanent_mouza = new javax.swing.JComboBox();
        lbl_permanent_village = new javax.swing.JLabel();
        cmb_permanent_village = new javax.swing.JComboBox();
        inp_permanent_village_otr = new javax.swing.JTextField();
        lbl_permanent_house = new javax.swing.JLabel();
        inp_permanent_house = new javax.swing.JTextField();
        separator_add_permanent = new javax.swing.JSeparator();
        lbl_permanent_add_header = new javax.swing.JLabel();
        cmb_voter_at = new javax.swing.JComboBox();
        lbl_birth_registration_no = new javax.swing.JLabel();
        cmb_voter_area = new javax.swing.JComboBox();

        setMaximumSize(new java.awt.Dimension(1350, 680));
        setMinimumSize(new java.awt.Dimension(1350, 680));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1350, 680));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        content_panel.setBackground(new Color(213, 134, 145, 123));
        content_panel.setMaximumSize(new java.awt.Dimension(1290, 610));
        content_panel.setMinimumSize(new java.awt.Dimension(1290, 610));
        content_panel.setOpaque(false);
        content_panel.setPreferredSize(new java.awt.Dimension(1290, 610));
        content_panel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                content_panelComponentShown(evt);
            }
        });
        content_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        separator_biometric.setBackground(new java.awt.Color(153, 153, 153));
        separator_biometric.setForeground(new java.awt.Color(153, 153, 153));
        separator_biometric.setOrientation(javax.swing.SwingConstants.VERTICAL);
        separator_biometric.setAlignmentX(10.0F);
        separator_biometric.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        separator_biometric.setOpaque(true);
        content_panel.add(separator_biometric, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 19, 1, 570));

        separator_personal_dtls.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        content_panel.add(separator_personal_dtls, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 14, 954, -1));

        lbl_biometric_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_biometric_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_biometric_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_biometric_header.setText("BIOMETRICS");
        content_panel.add(lbl_biometric_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 1, 150, 10));

        lbl_citizenship_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_citizenship_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_citizenship_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_citizenship_header.setText("CITIZENSHIP DETAILS");
        content_panel.add(lbl_citizenship_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 958, -1));

        separator_citizenship.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        content_panel.add(separator_citizenship, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 152, 950, -1));

        lbl_address_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_address_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_address_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_address_header.setText("ADDRESS");
        content_panel.add(lbl_address_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 253, 950, -1));

        lbl_name_bangla.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_name_bangla.setForeground(new java.awt.Color(102, 102, 102));
        lbl_name_bangla.setText("Name (in Bengali)");
        content_panel.add(lbl_name_bangla, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 140, 20));

        inp_name_bangla.setFont(new java.awt.Font("Kalpurush", 0, 11)); // NOI18N
        inp_name_bangla.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_name_bangla, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 320, 20));

        inp_name_english.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_name_english, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 20, 320, 20));

        lbl_name_english.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_name_english.setForeground(new java.awt.Color(102, 102, 102));
        lbl_name_english.setText("Name (in English)");
        content_panel.add(lbl_name_english, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 100, 20));

        inp_spouse_nid.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_spouse_nid, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 119, 150, 20));

        lbl_name_spouse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_name_spouse.setForeground(new java.awt.Color(102, 102, 102));
        lbl_name_spouse.setText("Spouse's Name");
        content_panel.add(lbl_name_spouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 119, 140, 20));

        inp_name_spouse.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_name_spouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 119, 240, 20));

        inp_name_mother.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_name_mother, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 94, 240, 20));

        lbl_name_mother.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_name_mother.setForeground(new java.awt.Color(102, 102, 102));
        lbl_name_mother.setText("Mother's Name");
        content_panel.add(lbl_name_mother, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 94, 140, 20));

        inp_mother_nid.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_mother_nid, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 94, 150, 20));

        lbl_name_father.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_name_father.setForeground(new java.awt.Color(102, 102, 102));
        lbl_name_father.setText("Father's Name");
        content_panel.add(lbl_name_father, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 69, 140, 20));

        inp_father_nid.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_father_nid, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 69, 150, 20));

        inp_name_father.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_name_father, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 69, 240, 20));

        inp_remark_fp.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_remark_fp, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 400, 290, 20));

        lbl_gender.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_gender.setForeground(new java.awt.Color(102, 102, 102));
        lbl_gender.setText("Gender");
        content_panel.add(lbl_gender, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 44, 140, 20));

        inp_nid.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_nid, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 157, 240, 20));

        lbl_national_id.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_national_id.setForeground(new java.awt.Color(102, 102, 102));
        lbl_national_id.setText("National Id");
        content_panel.add(lbl_national_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 157, 140, 20));

        lbl_nid_issue_date.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_nid_issue_date.setForeground(new java.awt.Color(102, 102, 102));
        lbl_nid_issue_date.setText("Nid Issue Date");
        content_panel.add(lbl_nid_issue_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 157, 100, 20));

        lbl_certi_issue_dist.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_certi_issue_dist.setForeground(new java.awt.Color(102, 102, 102));
        lbl_certi_issue_dist.setText("Birth Place (District)");
        content_panel.add(lbl_certi_issue_dist, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 182, 140, 20));

        cmb_birth_place_district.setForeground(new java.awt.Color(102, 102, 102));
        cmb_birth_place_district.setToolTipText("");
        cmb_birth_place_district.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        content_panel.add(cmb_birth_place_district, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 182, 240, 20));

        genderButtonGroup.add(rdo_gender_third);
        rdo_gender_third.setForeground(new java.awt.Color(102, 102, 102));
        rdo_gender_third.setText("Third Gender");
        rdo_gender_third.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        rdo_gender_third.setOpaque(false);
        content_panel.add(rdo_gender_third, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 44, 240, 20));

        genderButtonGroup.add(rdo_gender_female);
        rdo_gender_female.setForeground(new java.awt.Color(102, 102, 102));
        rdo_gender_female.setText("Female");
        rdo_gender_female.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        rdo_gender_female.setOpaque(false);
        content_panel.add(rdo_gender_female, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 44, 240, 20));

        lbl_marital_status.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_marital_status.setForeground(new java.awt.Color(102, 102, 102));
        lbl_marital_status.setText("Marital Status");
        content_panel.add(lbl_marital_status, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 119, 80, 20));

        lbl_hadicap_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_hadicap_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_hadicap_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_hadicap_header.setText("HANDICAP DETAILS");
        content_panel.add(lbl_hadicap_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 900, -1));

        separator_handicap.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        content_panel.add(separator_handicap, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 462, 950, -1));

        chk_sd_other.setForeground(new java.awt.Color(102, 102, 102));
        chk_sd_other.setText("Other Certificate");
        chk_sd_other.setOpaque(false);
        content_panel.add(chk_sd_other, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 530, 160, 20));

        chk_handicap_others.setForeground(new java.awt.Color(102, 102, 102));
        chk_handicap_others.setText("Others (Mention)");
        chk_handicap_others.setOpaque(false);
        content_panel.add(chk_handicap_others, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 482, -1, -1));

        chk_handicap_amputant.setForeground(new java.awt.Color(102, 102, 102));
        chk_handicap_amputant.setText("Both Limbs Amputated");
        chk_handicap_amputant.setOpaque(false);
        content_panel.add(chk_handicap_amputant, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 463, -1, -1));

        chk_handicap_visual.setForeground(new java.awt.Color(102, 102, 102));
        chk_handicap_visual.setText("Visually Impaired");
        chk_handicap_visual.setOpaque(false);
        content_panel.add(chk_handicap_visual, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 463, -1, -1));

        chk_handicap_deaf.setForeground(new java.awt.Color(102, 102, 102));
        chk_handicap_deaf.setText("Deaf");
        chk_handicap_deaf.setOpaque(false);
        content_panel.add(chk_handicap_deaf, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 482, -1, -1));

        chk_handicap_mute.setForeground(new java.awt.Color(102, 102, 102));
        chk_handicap_mute.setText("Can not Talk");
        chk_handicap_mute.setOpaque(false);
        content_panel.add(chk_handicap_mute, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 482, -1, -1));

        lbl_misc_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_misc_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_misc_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_misc_header.setText("MISCELLANEOUS");
        content_panel.add(lbl_misc_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 500, 950, -1));

        separator_misc.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        content_panel.add(separator_misc, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 512, 950, -1));

        lbl_edu_occu_rel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_edu_occu_rel.setForeground(new java.awt.Color(102, 102, 102));
        lbl_edu_occu_rel.setText("Education / Profession / Religion");
        content_panel.add(lbl_edu_occu_rel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, 150, 20));

        inp_telephone.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_telephone, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 545, 240, 20));

        inp_mobile.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_mobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 545, 240, 20));

        lbl_pass_tin_drv.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_pass_tin_drv.setForeground(new java.awt.Color(102, 102, 102));
        lbl_pass_tin_drv.setText("Passport / TIN / Driving License");
        content_panel.add(lbl_pass_tin_drv, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 570, 150, 20));

        inp_email.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_email, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 545, 240, 20));

        genderButtonGroup.add(rdo_gender_male);
        rdo_gender_male.setForeground(new java.awt.Color(102, 102, 102));
        rdo_gender_male.setText("Male");
        rdo_gender_male.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        rdo_gender_male.setOpaque(false);
        content_panel.add(rdo_gender_male, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 44, 240, 20));

        lbl_personal_dtls_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_personal_dtls_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_personal_dtls_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_personal_dtls_header.setText("PERSONAL DETAILS");
        content_panel.add(lbl_personal_dtls_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 1, 150, -1));

        separator_bio_horizontal.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        content_panel.add(separator_bio_horizontal, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 14, 290, -1));

        lbl_signature.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_signature.setForeground(new java.awt.Color(102, 102, 102));
        lbl_signature.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_signature.setText("SIGNATURE");
        lbl_signature.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_signature.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        lbl_signature.setOpaque(true);
        lbl_signature.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_signatureMouseClicked(evt);
            }
        });
        content_panel.add(lbl_signature, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 130, 290, 50));

        lbl_fp_lp.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_lp.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_lp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_lp.setText("PINKY");
        lbl_fp_lp.setToolTipText("");
        lbl_fp_lp.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_lp.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_lp, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 215, 45, 50));

        lbl_fp_lr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_lr.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_lr.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_lr.setText("RING");
        lbl_fp_lr.setToolTipText("");
        lbl_fp_lr.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_lr.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_lr, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 215, 45, 50));

        lbl_fp_lm.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_lm.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_lm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_lm.setText("MIDDLE");
        lbl_fp_lm.setToolTipText("");
        lbl_fp_lm.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_lm.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_lm, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 215, 45, 50));

        lbl_fp_li.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_li.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_li.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_li.setText("INDEX");
        lbl_fp_li.setToolTipText("");
        lbl_fp_li.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_li.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_li, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 215, 45, 50));

        lbl_fp_lt.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_lt.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_lt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_lt.setText("THUMB");
        lbl_fp_lt.setToolTipText("");
        lbl_fp_lt.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_lt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_lt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 215, 45, 50));

        lbl_fp_rp.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_rp.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_rp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_rp.setText("PINKY");
        lbl_fp_rp.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_rp.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_rp, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 305, 45, 50));

        lbl_fp_rr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_rr.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_rr.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_rr.setText("RING");
        lbl_fp_rr.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_rr.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_rr, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 305, 45, 50));

        lbl_fp_rm.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_rm.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_rm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_rm.setText("MIDDLE");
        lbl_fp_rm.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_rm.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_rm, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 305, 45, 50));

        lbl_fp_ri.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_ri.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_ri.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_ri.setText("INDEX");
        lbl_fp_ri.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_ri.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_ri, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 305, 45, 50));

        lbl_fp_rt.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_rt.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_rt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_fp_rt.setText("THUMB");
        lbl_fp_rt.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_fp_rt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        content_panel.add(lbl_fp_rt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 305, 45, 50));

        lbl_fp_container_right.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_container_right.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_container_right.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_fp_container_right.setText("<html>&nbsp;&nbsp;RIGHT HAND</html>");
        lbl_fp_container_right.setToolTipText("");
        lbl_fp_container_right.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_fp_container_right.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        lbl_fp_container_right.setOpaque(true);
        lbl_fp_container_right.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_fp_container_rightMouseClicked(evt);
            }
        });
        content_panel.add(lbl_fp_container_right, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 285, 270, 80));

        lbl_right_eye.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_right_eye.setForeground(new java.awt.Color(102, 102, 102));
        lbl_right_eye.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_right_eye.setText("RIGHT EYE");
        lbl_right_eye.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_right_eye.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        lbl_right_eye.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_right_eye.setMaximumSize(new java.awt.Dimension(100, 100));
        lbl_right_eye.setMinimumSize(new java.awt.Dimension(100, 100));
        lbl_right_eye.setOpaque(true);
        lbl_right_eye.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_right_eyeMouseClicked(evt);
            }
        });
        content_panel.add(lbl_right_eye, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 40, 80, 50));

        chk_handicap_speech.setForeground(new java.awt.Color(102, 102, 102));
        chk_handicap_speech.setText("Speech Impaired");
        chk_handicap_speech.setOpaque(false);
        content_panel.add(chk_handicap_speech, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 463, -1, -1));

        lbl_documents_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_documents_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_documents_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_documents_header.setText("DOCUMENTS PROVIDED");
        content_panel.add(lbl_documents_header, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 425, 150, 10));

        separator_docs.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        content_panel.add(separator_docs, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 437, 290, -1));

        chk_fp_not_ten_fingers.setForeground(new java.awt.Color(102, 102, 102));
        chk_fp_not_ten_fingers.setText("Less than 10 fingers");
        chk_fp_not_ten_fingers.setToolTipText("");
        chk_fp_not_ten_fingers.setOpaque(false);
        content_panel.add(chk_fp_not_ten_fingers, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 380, 290, 20));

        chk_sd_citizenship.setForeground(new java.awt.Color(102, 102, 102));
        chk_sd_citizenship.setText("Citizenship Certificate");
        chk_sd_citizenship.setOpaque(false);
        content_panel.add(chk_sd_citizenship, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 450, 160, 20));

        chk_sd_marriage.setForeground(new java.awt.Color(102, 102, 102));
        chk_sd_marriage.setText("Marriage Certificate");
        chk_sd_marriage.setOpaque(false);
        content_panel.add(chk_sd_marriage, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 470, 160, 20));

        chk_sd_transfer.setForeground(new java.awt.Color(102, 102, 102));
        chk_sd_transfer.setText("Transfer Certificate");
        chk_sd_transfer.setOpaque(false);
        content_panel.add(chk_sd_transfer, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 490, 160, 20));

        chk_sd_utility.setForeground(new java.awt.Color(102, 102, 102));
        chk_sd_utility.setText("Utility Certificate");
        chk_sd_utility.setOpaque(false);
        content_panel.add(chk_sd_utility, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 510, 160, 20));

        btn_attachment.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_attachment.setForeground(new java.awt.Color(102, 102, 102));
        btn_attachment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/b_scan.png"))); // NOI18N
        btn_attachment.setText("<html><br><br><br><br>Scan</html>");
        btn_attachment.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        btn_attachment.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_attachment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_attachmentActionPerformed(evt);
            }
        });
        content_panel.add(btn_attachment, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 450, 100, 100));

        btn_save.setBackground(new java.awt.Color(255, 255, 255));
        btn_save.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_save.setForeground(new java.awt.Color(102, 102, 102));
        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/btn_img_save_20.png"))); // NOI18N
        btn_save.setText("Save");
        btn_save.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        btn_save.setIconTextGap(10);
        btn_save.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btn_save.setMaximumSize(new java.awt.Dimension(80, 30));
        btn_save.setMinimumSize(new java.awt.Dimension(80, 30));
        btn_save.setPreferredSize(new java.awt.Dimension(80, 30));
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });
        content_panel.add(btn_save, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 560, 80, 30));

        btn_reset.setBackground(new java.awt.Color(255, 255, 255));
        btn_reset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_reset.setForeground(new java.awt.Color(102, 102, 102));
        btn_reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/btn_img_reset_20.png"))); // NOI18N
        btn_reset.setText("Reset");
        btn_reset.setToolTipText("");
        btn_reset.setAutoscrolls(true);
        btn_reset.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        btn_reset.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btn_reset.setIconTextGap(7);
        btn_reset.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btn_reset.setMaximumSize(new java.awt.Dimension(80, 30));
        btn_reset.setMinimumSize(new java.awt.Dimension(80, 30));
        btn_reset.setPreferredSize(new java.awt.Dimension(80, 30));
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });
        content_panel.add(btn_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 560, 80, 30));

        cmb_education.setForeground(new java.awt.Color(102, 102, 102));
        content_panel.add(cmb_education, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 520, 240, 20));

        cmb_religion.setForeground(new java.awt.Color(102, 102, 102));
        content_panel.add(cmb_religion, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 520, 240, 20));

        inp_tin_no.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_tin_no, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 570, 240, 20));

        inp_drv_license.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_drv_license, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 570, 240, 20));

        inp_passport.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_passport, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 570, 240, 20));

        cal_nid_issue_date.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        cal_nid_issue_date.setDateFormatString("yyyy/MM/dd");
        content_panel.add(cal_nid_issue_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 157, 130, 20));

        cal_date_of_birth.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        cal_date_of_birth.setDateFormatString("yyyy/MM/dd");
        content_panel.add(cal_date_of_birth, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 182, 130, 20));

        lbl_photo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_photo.setForeground(new java.awt.Color(102, 102, 102));
        lbl_photo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_photo.setText("PHOTO");
        lbl_photo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_photo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        lbl_photo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_photo.setMaximumSize(new java.awt.Dimension(100, 100));
        lbl_photo.setMinimumSize(new java.awt.Dimension(100, 100));
        lbl_photo.setOpaque(true);
        lbl_photo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_photoMouseClicked(evt);
            }
        });
        content_panel.add(lbl_photo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1085, 20, 100, 100));

        lbl_left_eye.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_left_eye.setForeground(new java.awt.Color(102, 102, 102));
        lbl_left_eye.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_left_eye.setText("LEFT EYE");
        lbl_left_eye.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_left_eye.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        lbl_left_eye.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbl_left_eye.setMaximumSize(new java.awt.Dimension(100, 100));
        lbl_left_eye.setMinimumSize(new java.awt.Dimension(100, 100));
        lbl_left_eye.setOpaque(true);
        lbl_left_eye.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_left_eyeMouseClicked(evt);
            }
        });
        content_panel.add(lbl_left_eye, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 40, 80, 50));

        lbl_spouse_nid.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_spouse_nid.setForeground(new java.awt.Color(102, 102, 102));
        lbl_spouse_nid.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_spouse_nid.setText("Spouse's NID");
        content_panel.add(lbl_spouse_nid, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 119, 80, 20));

        cmb_marital_status.setForeground(new java.awt.Color(102, 102, 102));
        cmb_marital_status.setToolTipText("");
        cmb_marital_status.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        content_panel.add(cmb_marital_status, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 119, 190, 20));

        lbl_father_nid.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_father_nid.setForeground(new java.awt.Color(102, 102, 102));
        lbl_father_nid.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_father_nid.setText("Father's NID");
        content_panel.add(lbl_father_nid, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 69, 80, 20));

        lbl_mother_nid.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mother_nid.setForeground(new java.awt.Color(102, 102, 102));
        lbl_mother_nid.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_mother_nid.setText("Mother's NID");
        content_panel.add(lbl_mother_nid, new org.netbeans.lib.awtextra.AbsoluteConstraints(411, 94, 80, 20));

        inp_nid_old.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_nid_old, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 157, 190, 20));

        lbl_nid_old.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_nid_old.setForeground(new java.awt.Color(102, 102, 102));
        lbl_nid_old.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_nid_old.setText("Previous NID");
        content_panel.add(lbl_nid_old, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 157, 80, 20));

        inp_nationality.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_nationality, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 182, 190, 20));

        lbl_nationality.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_nationality.setForeground(new java.awt.Color(102, 102, 102));
        lbl_nationality.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_nationality.setText("Nationality");
        content_panel.add(lbl_nationality, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 182, 80, 20));

        inp_birth_registration_no.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_birth_registration_no, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 207, 240, 20));

        lbl_add_voter_area.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_add_voter_area.setForeground(new java.awt.Color(102, 102, 102));
        lbl_add_voter_area.setText("Voter Area");
        content_panel.add(lbl_add_voter_area, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 420, 80, 20));

        lbl_date_of_birth.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_date_of_birth.setForeground(new java.awt.Color(102, 102, 102));
        lbl_date_of_birth.setText("Date of Birth");
        content_panel.add(lbl_date_of_birth, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 182, 100, 20));

        cmb_blood_grp.setForeground(new java.awt.Color(102, 102, 102));
        cmb_blood_grp.setMaximumRowCount(10);
        cmb_blood_grp.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        content_panel.add(cmb_blood_grp, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 207, 130, -1));

        inp_uim.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        content_panel.add(inp_uim, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 232, 780, 20));

        lbl_uim.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_uim.setForeground(new java.awt.Color(102, 102, 102));
        lbl_uim.setText("Unique Id Mark");
        content_panel.add(lbl_uim, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 232, 130, 20));

        separator_address.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        content_panel.add(separator_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 265, 950, -1));

        cmb_profession.setForeground(new java.awt.Color(102, 102, 102));
        content_panel.add(cmb_profession, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 520, 240, 20));

        lbl_tel_cell_mail.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_tel_cell_mail.setForeground(new java.awt.Color(102, 102, 102));
        lbl_tel_cell_mail.setText("Telephone / Mobile / Email");
        content_panel.add(lbl_tel_cell_mail, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 545, 140, 20));

        lbl_fp_container_left.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbl_fp_container_left.setForeground(new java.awt.Color(102, 102, 102));
        lbl_fp_container_left.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_fp_container_left.setText("<html>&nbsp;&nbsp;LEFT HAND</html>");
        lbl_fp_container_left.setToolTipText("");
        lbl_fp_container_left.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_fp_container_left.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        lbl_fp_container_left.setOpaque(true);
        lbl_fp_container_left.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_fp_container_leftMouseClicked(evt);
            }
        });
        content_panel.add(lbl_fp_container_left, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 195, 270, 80));

        lbll_fp_container.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbll_fp_container.setForeground(new java.awt.Color(102, 102, 102));
        lbll_fp_container.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbll_fp_container.setText("FINGERPRINTS");
        lbll_fp_container.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbll_fp_container.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        lbll_fp_container.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbll_fp_containerMouseClicked(evt);
            }
        });
        content_panel.add(lbll_fp_container, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 190, 290, 190));

        lbl_add_voter_at.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_add_voter_at.setForeground(new java.awt.Color(102, 102, 102));
        lbl_add_voter_at.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_add_voter_at.setText("Voter at");
        content_panel.add(lbl_add_voter_at, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 420, 80, 20));

        lbl_blood_grp.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_blood_grp.setForeground(new java.awt.Color(102, 102, 102));
        lbl_blood_grp.setText("Blood Group");
        content_panel.add(lbl_blood_grp, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 207, 100, 20));

        scrp_handi_othern.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txt_handicap_remarks.setColumns(10);
        txt_handicap_remarks.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txt_handicap_remarks.setRows(10);
        txt_handicap_remarks.setTabSize(5);
        scrp_handi_othern.setViewportView(txt_handicap_remarks);

        content_panel.add(scrp_handi_othern, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 465, 280, 40));

        scr_address.setBackground(new Color(213, 134, 145, 123));
        scr_address.setBorder(null);
        scr_address.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scr_address.setMaximumSize(new java.awt.Dimension(950, 150));
        scr_address.setMinimumSize(new java.awt.Dimension(950, 150));
        scr_address.setOpaque(false);
        scr_address.setPreferredSize(new java.awt.Dimension(950, 150));

        address_base_panel.setBackground(new Color(0, 0, 0, 0));
        address_base_panel.setMaximumSize(new java.awt.Dimension(930, 290));
        address_base_panel.setMinimumSize(new java.awt.Dimension(930, 290));
        address_base_panel.setOpaque(false);
        address_base_panel.setPreferredSize(new java.awt.Dimension(930, 290));
        address_base_panel.setLayout(null);

        lbl_present_add_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_present_add_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_present_add_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_present_add_header.setText("PRESENT");
        address_base_panel.add(lbl_present_add_header);
        lbl_present_add_header.setBounds(25, 10, 500, 10);

        separator_add_present.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        address_base_panel.add(separator_add_present);
        separator_add_present.setBounds(25, 22, 898, 1);

        present_add_panel.setBackground(new Color(0, 0, 0, 0));
        present_add_panel.setMaximumSize(new java.awt.Dimension(920, 110));
        present_add_panel.setMinimumSize(new java.awt.Dimension(920, 110));
        present_add_panel.setOpaque(false);
        present_add_panel.setPreferredSize(new java.awt.Dimension(920, 110));
        present_add_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmb_present_division.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_division.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_divisionItemStateChanged(evt);
            }
        });
        cmb_present_division.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_present_add_divisionActionPerformed(evt);
            }
        });
        present_add_panel.add(cmb_present_division, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 10, 120, 20));

        cmb_present_district.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_district.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_districtItemStateChanged(evt);
            }
        });
        present_add_panel.add(cmb_present_district, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 120, 20));

        cmb_present_upozila.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_upozila.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_upozilaItemStateChanged(evt);
            }
        });
        present_add_panel.add(cmb_present_upozila, new org.netbeans.lib.awtextra.AbsoluteConstraints(585, 10, 120, 20));

        inp_present_mouza_otr.setEditable(false);
        inp_present_mouza_otr.setBackground(new java.awt.Color(255, 255, 255));
        inp_present_mouza_otr.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        present_add_panel.add(inp_present_mouza_otr, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 60, 205, 20));

        lbl_present_division.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_division.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_division.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_present_division.setText("Division");
        lbl_present_division.setOpaque(true);
        present_add_panel.add(lbl_present_division, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 80, 20));

        lbl_present_district.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_district.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_district.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_present_district.setText("District");
        lbl_present_district.setOpaque(true);
        present_add_panel.add(lbl_present_district, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 10, 80, 20));

        lbl_present_upozila.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_upozila.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_upozila.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_present_upozila.setText("Upozila");
        lbl_present_upozila.setOpaque(true);
        present_add_panel.add(lbl_present_upozila, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 80, 20));

        lbl_present_postcode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_postcode.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_postcode.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_present_postcode.setText("Post Code");
        lbl_present_postcode.setOpaque(true);
        present_add_panel.add(lbl_present_postcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 35, 80, 20));

        cmb_present_rmo.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_rmo.setMaximumRowCount(15);
        cmb_present_rmo.setToolTipText("");
        cmb_present_rmo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_rmoItemStateChanged(evt);
            }
        });
        present_add_panel.add(cmb_present_rmo, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 10, 120, 20));

        lbl_present_city.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_city.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_city.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_present_city.setText("City Corp.");
        lbl_present_city.setOpaque(true);
        present_add_panel.add(lbl_present_city, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 35, 80, 20));

        cmb_present_city.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_city.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cmb_present_city.setMaximumSize(new java.awt.Dimension(200, 20));
        cmb_present_city.setMinimumSize(new java.awt.Dimension(200, 20));
        cmb_present_city.setPreferredSize(new java.awt.Dimension(200, 20));
        cmb_present_city.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_cityItemStateChanged(evt);
            }
        });
        present_add_panel.add(cmb_present_city, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 35, 120, 20));

        lbl_present_eunion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_eunion.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_eunion.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_present_eunion.setText("Eunion");
        lbl_present_eunion.setOpaque(true);
        present_add_panel.add(lbl_present_eunion, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 35, 80, 20));

        cmb_present_eunion.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_eunion.setMaximumRowCount(15);
        cmb_present_eunion.setToolTipText("");
        cmb_present_eunion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_eunionItemStateChanged(evt);
            }
        });
        present_add_panel.add(cmb_present_eunion, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 35, 120, 20));

        lbl_present_postoffice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_postoffice.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_postoffice.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_present_postoffice.setText("Post Office");
        lbl_present_postoffice.setOpaque(true);
        present_add_panel.add(lbl_present_postoffice, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 35, 80, 20));

        cmb_present_postoffice.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_postoffice.setMaximumRowCount(15);
        cmb_present_postoffice.setToolTipText("");
        cmb_present_postoffice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_postofficeItemStateChanged(evt);
            }
        });
        present_add_panel.add(cmb_present_postoffice, new org.netbeans.lib.awtextra.AbsoluteConstraints(585, 35, 120, 20));

        lbl_present_rmo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_rmo.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_rmo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_present_rmo.setText("R.M.O");
        lbl_present_rmo.setOpaque(true);
        present_add_panel.add(lbl_present_rmo, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 10, 80, 20));

        inp_present_postcode.setEditable(false);
        inp_present_postcode.setBackground(new java.awt.Color(255, 255, 255));
        inp_present_postcode.setForeground(new java.awt.Color(102, 102, 102));
        inp_present_postcode.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        present_add_panel.add(inp_present_postcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 35, 100, -1));

        lbl_present_mouza.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_mouza.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_mouza.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_present_mouza.setText("Mouza");
        lbl_present_mouza.setOpaque(true);
        present_add_panel.add(lbl_present_mouza, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 80, 20));

        cmb_present_mouza.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_mouza.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_mouzaItemStateChanged(evt);
            }
        });
        present_add_panel.add(cmb_present_mouza, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 60, 120, 20));

        lbl_present_village.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_village.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_village.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_present_village.setText("Village");
        lbl_present_village.setOpaque(true);
        present_add_panel.add(lbl_present_village, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 80, 20));

        cmb_present_village.setForeground(new java.awt.Color(102, 102, 102));
        cmb_present_village.setMaximumRowCount(15);
        cmb_present_village.setToolTipText("");
        cmb_present_village.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_present_villageItemStateChanged(evt);
            }
        });
        present_add_panel.add(cmb_present_village, new org.netbeans.lib.awtextra.AbsoluteConstraints(585, 60, 120, 20));

        inp_present_village_otr.setEditable(false);
        inp_present_village_otr.setBackground(new java.awt.Color(255, 255, 255));
        present_add_panel.add(inp_present_village_otr, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 60, 200, 20));

        lbl_present_house.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_present_house.setForeground(new java.awt.Color(102, 102, 102));
        lbl_present_house.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_present_house.setText("House");
        lbl_present_house.setOpaque(true);
        present_add_panel.add(lbl_present_house, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 85, 80, 20));
        present_add_panel.add(inp_present_house, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 85, 120, -1));

        address_base_panel.add(present_add_panel);
        present_add_panel.setBounds(5, 25, 920, 110);

        permanent_add_panel.setBackground(new Color(0, 0, 0, 0));
        permanent_add_panel.setMaximumSize(new java.awt.Dimension(920, 110));
        permanent_add_panel.setMinimumSize(new java.awt.Dimension(920, 110));
        permanent_add_panel.setOpaque(false);
        permanent_add_panel.setPreferredSize(new java.awt.Dimension(920, 110));
        permanent_add_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmb_permanent_district.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_district.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_districtItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_district, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 120, 20));

        cmb_permanent_division.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_division.setToolTipText("");
        cmb_permanent_division.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_divisionItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_division, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 10, 120, 20));

        cmb_permanent_upozila.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_upozila.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_upozilaItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_upozila, new org.netbeans.lib.awtextra.AbsoluteConstraints(585, 10, 120, 20));

        inp_permanent_mouza_otr.setEditable(false);
        inp_permanent_mouza_otr.setBackground(new java.awt.Color(255, 255, 255));
        inp_permanent_mouza_otr.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        permanent_add_panel.add(inp_permanent_mouza_otr, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 60, 205, 20));

        lbl_permanent_division.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_division.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_division.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_permanent_division.setText("Division");
        lbl_permanent_division.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_division, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 80, 20));

        lbl_permanent_district.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_district.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_district.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_permanent_district.setText("District");
        lbl_permanent_district.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_district, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 10, 80, 20));

        lbl_permanent_upozila.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_upozila.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_upozila.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_permanent_upozila.setText("Upozila");
        lbl_permanent_upozila.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_upozila, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 80, 20));

        lbl_permanent_postcode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_postcode.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_postcode.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_permanent_postcode.setText("Post Code");
        lbl_permanent_postcode.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_postcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 35, 80, 20));

        cmb_permanent_rmo.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_rmo.setMaximumRowCount(15);
        cmb_permanent_rmo.setToolTipText("");
        cmb_permanent_rmo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_rmoItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_rmo, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 10, 120, 20));

        lbl_permanent_city.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_city.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_city.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_permanent_city.setText("City Corp.");
        lbl_permanent_city.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_city, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 35, 80, 20));

        cmb_permanent_city.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_city.setMaximumRowCount(15);
        cmb_permanent_city.setToolTipText("");
        cmb_permanent_city.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_cityItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_city, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 35, 120, 20));

        lbl_permanent_eunion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_eunion.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_eunion.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_permanent_eunion.setText("Eunion");
        lbl_permanent_eunion.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_eunion, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 35, 80, 20));

        cmb_permanent_eunion.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_eunion.setMaximumRowCount(15);
        cmb_permanent_eunion.setToolTipText("");
        cmb_permanent_eunion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_eunionItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_eunion, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 35, 120, 20));

        lbl_permanent_postoffice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_postoffice.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_postoffice.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_permanent_postoffice.setText("Post Office");
        lbl_permanent_postoffice.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_postoffice, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 35, 80, 20));

        cmb_permanent_postoffice.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_postoffice.setMaximumRowCount(15);
        cmb_permanent_postoffice.setToolTipText("");
        cmb_permanent_postoffice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_postofficeItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_postoffice, new org.netbeans.lib.awtextra.AbsoluteConstraints(585, 35, 120, 20));

        lbl_permanent_rmo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_rmo.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_rmo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_permanent_rmo.setText("R.M.O");
        lbl_permanent_rmo.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_rmo, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 10, 80, 20));

        inp_permanent_postcode.setEditable(false);
        inp_permanent_postcode.setBackground(new java.awt.Color(255, 255, 255));
        inp_permanent_postcode.setForeground(new java.awt.Color(102, 102, 102));
        inp_permanent_postcode.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        permanent_add_panel.add(inp_permanent_postcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 35, 100, -1));

        lbl_permanent_mouza.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_mouza.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_mouza.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_permanent_mouza.setText("Mouza");
        lbl_permanent_mouza.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_mouza, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 80, 20));

        cmb_permanent_mouza.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_mouza.setMaximumRowCount(15);
        cmb_permanent_mouza.setToolTipText("");
        cmb_permanent_mouza.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_mouzaItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_mouza, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 60, 120, 20));

        lbl_permanent_village.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_village.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_village.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_permanent_village.setText("Village");
        lbl_permanent_village.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_village, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 80, 20));

        cmb_permanent_village.setForeground(new java.awt.Color(102, 102, 102));
        cmb_permanent_village.setMaximumRowCount(15);
        cmb_permanent_village.setToolTipText("");
        cmb_permanent_village.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_permanent_villageItemStateChanged(evt);
            }
        });
        permanent_add_panel.add(cmb_permanent_village, new org.netbeans.lib.awtextra.AbsoluteConstraints(585, 60, 120, 20));

        inp_permanent_village_otr.setEditable(false);
        inp_permanent_village_otr.setBackground(new java.awt.Color(255, 255, 255));
        permanent_add_panel.add(inp_permanent_village_otr, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 60, 200, 20));

        lbl_permanent_house.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_permanent_house.setForeground(new java.awt.Color(102, 102, 102));
        lbl_permanent_house.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_permanent_house.setText("House");
        lbl_permanent_house.setOpaque(true);
        permanent_add_panel.add(lbl_permanent_house, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 85, 80, 20));
        permanent_add_panel.add(inp_permanent_house, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 85, 120, -1));

        address_base_panel.add(permanent_add_panel);
        permanent_add_panel.setBounds(5, 165, 920, 110);

        separator_add_permanent.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        address_base_panel.add(separator_add_permanent);
        separator_add_permanent.setBounds(25, 162, 898, 1);

        lbl_permanent_add_header.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_permanent_add_header.setForeground(new java.awt.Color(51, 153, 255));
        lbl_permanent_add_header.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_permanent_add_header.setText("PERMANENT");
        address_base_panel.add(lbl_permanent_add_header);
        lbl_permanent_add_header.setBounds(25, 150, 500, 10);

        scr_address.setViewportView(address_base_panel);

        content_panel.add(scr_address, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 950, 150));

        cmb_voter_at.setForeground(new java.awt.Color(102, 102, 102));
        cmb_voter_at.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_voter_atItemStateChanged(evt);
            }
        });
        content_panel.add(cmb_voter_at, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 420, 120, 20));

        lbl_birth_registration_no.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_birth_registration_no.setForeground(new java.awt.Color(102, 102, 102));
        lbl_birth_registration_no.setText("Birth Registration No.");
        content_panel.add(lbl_birth_registration_no, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 207, 140, 20));

        cmb_voter_area.setEnabled(false);
        content_panel.add(cmb_voter_area, new org.netbeans.lib.awtextra.AbsoluteConstraints(385, 420, 120, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(content_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(content_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lbl_fp_container_rightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_fp_container_rightMouseClicked
        callGreenBitFingerPrint();

    }//GEN-LAST:event_lbl_fp_container_rightMouseClicked

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

        try {

            prepareApplicationData();

            boolean dataValidationStatus = isDataValid();
            
            if (dataValidationStatus) {
                dataReady();
            } else {
                dataError();
            }

//            if (false) {
//
//                boolean isUpdate = false;
//
//                business.entity.BioBiometric bioBiometric = new business.entity.BioBiometric();
//                bioBiometric.setPhoto(applicationData.getPhoto());
//                bioBiometric.setSignature(applicationData.getSignature());
//                bioBiometric.setWsqRt(applicationData.getWsqRt());
//                bioBiometric.setWsqRi(applicationData.getWsqRi());
//                bioBiometric.setWsqRm(applicationData.getWsqRm());
//                bioBiometric.setWsqRr(applicationData.getWsqRr());
//                bioBiometric.setWsqRl(applicationData.getWsqRl());
//                bioBiometric.setWsqLt(applicationData.getWsqLt());
//                bioBiometric.setWsqLi(applicationData.getWsqLi());
//                bioBiometric.setWsqLm(applicationData.getWsqLm());
//                bioBiometric.setWsqLr(applicationData.getWsqLr());
//                bioBiometric.setWsqLl(applicationData.getWsqLl());
//                bioBiometric.setFingerRemarks(applicationData.getFingerRemarks());
//                bioBiometric.setEyeLeft(applicationData.getLeft_eye());
//                bioBiometric.setEyeRight(applicationData.getRight_eye());
//
//                BioPerson bioPerson = new BioPerson();
//                if (applicationData.getId() != null && applicationData.getId().intValue() > 0) {
//                    bioPerson.setId(applicationData.getId());
//                    isUpdate = true;
//                }
//                if (applicationData.getBiometricId() != null && applicationData.getBiometricId().intValue() > 0) {
//                    bioBiometric.setId(applicationData.getId());
//                    isUpdate = true;
//                }
//                bioPerson.setBiometric(bioBiometric);
//
//                bioPerson.setNameBn(applicationData.getNameBn());
//                bioPerson.setNameEn(applicationData.getNameEn());
//
//                bioPerson.setGender(applicationData.getGender());
//
//                bioPerson.setFatherName(applicationData.getFatherName());
//                bioPerson.setFatherNid(applicationData.getFatherNid());
//
//                bioPerson.setMotherName(applicationData.getMotherName());
//                bioPerson.setMotherNid(applicationData.getMotherNid());
//
//                bioPerson.setSpouseName(applicationData.getSpouseName());
//                bioPerson.setSpouseNid(applicationData.getSpouseNid());
//                bioPerson.setMaritalStatus(applicationData.getMaritalStatus());
//
//                bioPerson.setNidNumber(applicationData.getNidNumber() != null ? applicationData.getNidNumber() : "");
//                bioPerson.setNidIssueDate(applicationData.getNidIssueDate());
//                bioPerson.setPinNo(applicationData.getPinNo() != null ? applicationData.getPinNo() : "");
//
//                bioPerson.setBirthDistrict(applicationData.getBirthDistrict());
//                bioPerson.setDateOfBirth(applicationData.getDateOfBirth() != null ? applicationData.getDateOfBirth() : "");
//                bioPerson.setNationality(applicationData.getNationality());
//
//                bioPerson.setBirthRegistrationNumber(applicationData.getBirthRegistrationNumber());
//                bioPerson.setBloodGroup(applicationData.getBloodGroup());
//
//                bioPerson.setUniqueIdentificationMark(applicationData.getUniqueIdentificationMark());
//
//                bioPerson.setPresentDivision(applicationData.getPresentDivision());
//                bioPerson.setPresentDistrict(applicationData.getPresentDistrict());
//                bioPerson.setPresentUpozila(applicationData.getPresentUpozila());
//                bioPerson.setPresentRmo(applicationData.getPresentRmo());
//                bioPerson.setPresentCity(applicationData.getPresentCity());
//                bioPerson.setPresentEunion(applicationData.getPresentEunion());
//                bioPerson.setPresentPostOffice(applicationData.getPresentPostOffice());
//                bioPerson.setPresentPostCode(applicationData.getPresentPostCode());
//                bioPerson.setPresentMouza(applicationData.getPresentMouza());
//                bioPerson.setPresentMouzaOtr(applicationData.getPresentMouzaOtr());
//                bioPerson.setPresentVillage(applicationData.getPresentVillage());
//                bioPerson.setPresentVillageOtr(applicationData.getPresentVillageOtr());
//                bioPerson.setPresentHouseNo(applicationData.getPresentHouseNo());
//
//                bioPerson.setPermDivision(applicationData.getPermDivision());
//                bioPerson.setPermDistrict(applicationData.getPermDistrict());
//                bioPerson.setPermUpozila(applicationData.getPermUpozila());
//                bioPerson.setPermanentRmo(applicationData.getPermanentRmo());
//                bioPerson.setPermanentCity(applicationData.getPermanentCity());
//                bioPerson.setPermanentEunion(applicationData.getPermanentEunion());
//                bioPerson.setPermanentPostOffice(applicationData.getPermanentPostOffice());
//                bioPerson.setPermanentPostCode(applicationData.getPermanentPostCode());
//                bioPerson.setPermanentMouza(applicationData.getPermanentMouza());
//                bioPerson.setPermanentMouzaOtr(applicationData.getPermanentMouzaOtr());
//                bioPerson.setPermanentVillage(applicationData.getPermanentVillage());
//                bioPerson.setPermanentVillageOtr(applicationData.getPermanentVillageOtr());
//                bioPerson.setPermanentHouseNo(applicationData.getPermanentHouseNo());
//
//                bioPerson.setVoterAt(applicationData.getVoterAt());
//                bioPerson.setVoterArea(applicationData.getVoterArea());
//
//                bioPerson.setHandicapInfo(applicationData.getHandicapInfo());
//                bioPerson.setHandicapRemarks(applicationData.getHandicapRemarks());
//
//                bioPerson.setEducationLevel(applicationData.getEducationLevel());
//                bioPerson.setProfession(applicationData.getProfession());
//                bioPerson.setReligion(applicationData.getReligion());
//
//                bioPerson.setPhone(applicationData.getPhone());
//                bioPerson.setMobile(applicationData.getMobile());
//                bioPerson.setEmail(applicationData.getEmail());
//
//                bioPerson.setPassport(applicationData.getPassport());
//                bioPerson.setTin(applicationData.getTin());
//                bioPerson.setDlNumber(applicationData.getDlNumber());
//
//                PersonManagerBean personManagerBean = new PersonManagerBean();
//                AddBioPersonResponse resp = personManagerBean.insertUpdatePerson(bioPerson);
//
//                if (resp.isOperationStatus()) {
//
//                    applicationData.setId(resp.getBioPerson().getId());
//                    personManagerBean.deleteAndInsertAttachment(applicationData);
//
//                    applicationData = new ApplicationData();
//
//                    resetEnrollmentApplication();
//
//                    JOptionPane.showMessageDialog(null, "Data Saved Successfully", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
//
//                } else {
//
//                    JOptionPane.showMessageDialog(null, "Failed To Save", "ERROR", JOptionPane.ERROR_MESSAGE);
//
//                }
//
//            }
        } catch (Exception ex) {

            ex.printStackTrace();

        }

    }//GEN-LAST:event_btn_saveActionPerformed

    private void cmb_present_add_divisionActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void cmb_present_divisionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_divisionItemStateChanged

       if (evt.getStateChange() == ItemEvent.SELECTED) {
            System.out.println("cmb_present_divisionItemStateChanged");
            AddressEntityManagerBean aem;
            String value = null;
            try {
                value = (((Item) cmb_present_division.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (value != null && !value.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<District> districts = aem.getDistrictFindByDivisionId(Integer.parseInt(value));


                cmb_present_district.removeAllItems();
                cmb_present_district.addItem(new Item<String>("", "District"));
                DIVISION_VALUE=value;

                int cnt = 0;
                int selectedIndx = 0;

                for (District dc : districts) {
                    ++cnt;
                    cmb_present_district.addItem(new Item<String>(dc.getId(), dc.getNameEn()));
                    
                    if (dc.getId()!=null && dc.getId().equalsIgnoreCase(applicationData.getPresentDistrict())) {
                        selectedIndx = cnt;
                       System.out.println("Present Dist: "+applicationData.getPresentDistrict());
                    }
                    else
                    {
                        System.out.println("BaRaChara Obstha");
                    }
                }
                cmb_present_district.setSelectedIndex(selectedIndx);
                setted_present_district=(((Item) cmb_present_district.getItemAt(selectedIndx)).getValue().toString());

            } else {
                cmb_present_district.removeAllItems();
                cmb_present_district.addItem(new Item<String>("", "District"));

            }
        }


    }//GEN-LAST:event_cmb_present_divisionItemStateChanged

    private void cmb_present_districtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_districtItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;
            String value = null;
            try {
                value = (((Item) cmb_present_district.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (value != null && !value.isEmpty()) {

                //Upozila

                aem = new AddressEntityManagerBean();
                List<Upozila> upozilas = aem.getUpozilaFindByDistrictId(Integer.parseInt(value));
                DISTRICT_VALUE=value;

                cmb_present_upozila.removeAllItems();
                cmb_present_upozila.addItem(new Item<String>("", "Upozila"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Upozila uz : upozilas) {
                    ++cnt;
                    cmb_present_upozila.addItem(new Item<String>(uz.getId(), uz.getNameEn()));
                    if (uz.getId().equalsIgnoreCase(applicationData.getPresentUpozila())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_present_upozila.setSelectedIndex(selectedIndx);
                setted_present_upozila = (((Item) cmb_present_upozila.getItemAt(selectedIndx)).getValue().toString());

                //Post Office

                aem = new AddressEntityManagerBean();
                List<Postoffice> postoffices = aem.getPostOfficeByDistrict(value);

                cmb_present_postoffice.removeAllItems();
                cmb_present_postoffice.addItem(new Item<String>("", "Post Office"));

                int pocnt = 0;
                int poselectedIndx = 0;

                for (Postoffice po : postoffices) {
                    ++pocnt;
                    cmb_present_postoffice.addItem(new Item<String>(po.getId().toString(), po.getSuboffice()));
                    if (po.getId().toString().equalsIgnoreCase(applicationData.getPresentPostOffice())) {
                        poselectedIndx = pocnt;
                    }
                }
                cmb_present_postoffice.setSelectedIndex(poselectedIndx);
                setted_present_postoffice = (((Item) cmb_present_postoffice.getItemAt(poselectedIndx)).getValue().toString());

            } else {

                //Upozila
                cmb_present_upozila.removeAllItems();
                cmb_present_upozila.addItem(new Item<String>("", "Upozila"));

                //Post office
                cmb_present_postoffice.removeAllItems();
                cmb_present_postoffice.addItem(new Item<String>("", "Post Office"));

            }
        }
    }//GEN-LAST:event_cmb_present_districtItemStateChanged

    private void cmb_permanent_divisionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_divisionItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            System.out.println("cmb_permanent_divisionItemStateChanged");
//            System.out.println("perm division:" + System.currentTimeMillis());
            AddressEntityManagerBean aem;
            String value = null;
            try {
                value = (((Item) cmb_permanent_division.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (value != null && !value.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<District> districts = aem.getDistrictFindByDivisionId(Integer.parseInt(value));


                cmb_permanent_district.removeAllItems();
                cmb_permanent_district.addItem(new Item<String>("", "District"));

                int cnt = 0;
                int selectedIndx = 0;

                for (District dc : districts) {
                    ++cnt;
                    cmb_permanent_district.addItem(new Item<String>(dc.getId(), dc.getNameEn()));

                    if (dc.getId().equalsIgnoreCase(applicationData.getPermDistrict())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_permanent_district.setSelectedIndex(selectedIndx);
                setted_permanent_district=(((Item) cmb_permanent_district.getItemAt(selectedIndx)).getValue().toString());


            } else {
                cmb_permanent_district.removeAllItems();
                cmb_permanent_district.addItem(new Item<String>("", "District"));
            }

        }
    }//GEN-LAST:event_cmb_permanent_divisionItemStateChanged

    private void cmb_permanent_districtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_districtItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;
            String value = null;
            try {
                value = (((Item) cmb_permanent_district.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (value != null && !value.isEmpty()) {

                //Upozila

                aem = new AddressEntityManagerBean();
                List<Upozila> upozilas = aem.getUpozilaFindByDistrictId(Integer.parseInt(value));

                cmb_permanent_upozila.removeAllItems();
                cmb_permanent_upozila.addItem(new Item<String>("", "Upozila"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Upozila uz : upozilas) {
                    cmb_permanent_upozila.addItem(new Item<String>(uz.getId(), uz.getNameEn()));
                    ++cnt;
                    if (uz.getId().equalsIgnoreCase(applicationData.getPermUpozila())) {
                        selectedIndx = cnt;
                    }

                }
                cmb_permanent_upozila.setSelectedIndex(selectedIndx);
                setted_permanent_upozila=(((Item) cmb_permanent_upozila.getItemAt(selectedIndx)).getValue().toString());

                //Post Office

                aem = new AddressEntityManagerBean();
                List<Postoffice> postoffices = aem.getPostOfficeByDistrict(value);

                cmb_permanent_postoffice.removeAllItems();
                cmb_permanent_postoffice.addItem(new Item<String>("", "Post Office"));

                int pocnt = 0;
                int poselectedIndx = 0;

                for (Postoffice po : postoffices) {
                    ++pocnt;
                    cmb_permanent_postoffice.addItem(new Item<String>(po.getId().toString(), po.getSuboffice()));
                    if (po.getId().toString().equalsIgnoreCase(applicationData.getPermanentPostOffice())) {
                        poselectedIndx = pocnt;
                    }
                }
                cmb_permanent_postoffice.setSelectedIndex(poselectedIndx);
                setted_permanent_postoffice=(((Item) cmb_permanent_postoffice.getItemAt(poselectedIndx)).getValue().toString());

            } else {
                //Upozila
                cmb_permanent_upozila.removeAllItems();
                cmb_permanent_upozila.addItem(new Item<String>("", "Upozila"));

                //Post office
                cmb_permanent_postoffice.removeAllItems();
                cmb_permanent_postoffice.addItem(new Item<String>("", "Post Office"));

            }

        }
    }//GEN-LAST:event_cmb_permanent_districtItemStateChanged

    private void btn_attachmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_attachmentActionPerformed

        Scanner frm = new Scanner();
        frm.setVisible(true);
        frm.cmb_attachment_type.setSelectedIndex(0);
        frm.onTypeChange();

    }//GEN-LAST:event_btn_attachmentActionPerformed

    private void lbl_signatureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_signatureMouseClicked
        // TODO add your handling code here:
        SignatureCaptureForm frm = new SignatureCaptureForm();
        frm.setVisible(true);
    }//GEN-LAST:event_lbl_signatureMouseClicked

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed

        resetEnrollmentApplication();

    }//GEN-LAST:event_btn_resetActionPerformed

    private void lbl_photoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_photoMouseClicked
        // TODO add your handling code here:
        try {
            ICAOFaceInternalFrame frm = new ICAOFaceInternalFrame();
            frm.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Wemcam DEVICE NOT FOUND", "INFO", JOptionPane.INFORMATION_MESSAGE);
            ex.printStackTrace();

        }
    }//GEN-LAST:event_lbl_photoMouseClicked

    private void lbl_left_eyeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_left_eyeMouseClicked

//        JOptionPane.showMessageDialog(null, "Capture left eye", "INFO", JOptionPane.INFORMATION_MESSAGE);
        IrisForm irisForm = new IrisForm(Defs.IRIS_IDX_LEFT);
        irisForm.setLocationRelativeTo(null);
        irisForm.setTitle("Eye Capture (Left)");
        irisForm.setVisible(true);

    }//GEN-LAST:event_lbl_left_eyeMouseClicked

    private void lbl_right_eyeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_right_eyeMouseClicked

//        JOptionPane.showMessageDialog(null, "Capture right eye", "INFO", JOptionPane.INFORMATION_MESSAGE);
        IrisForm irisForm = new IrisForm(Defs.IRIS_IDX_RIGHT);
        irisForm.setLocationRelativeTo(null);
        irisForm.setTitle("Eye Capture (Right)");
        irisForm.setVisible(true);

    }//GEN-LAST:event_lbl_right_eyeMouseClicked

    private void lbl_fp_container_leftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_fp_container_leftMouseClicked
        callGreenBitFingerPrint();

    }//GEN-LAST:event_lbl_fp_container_leftMouseClicked

    private void lbll_fp_containerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbll_fp_containerMouseClicked
        callGreenBitFingerPrint();

    }//GEN-LAST:event_lbll_fp_containerMouseClicked

    private void cmb_present_rmoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_rmoItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;

            String rmo = null;
            String district = null;
            String upozila = null;

            try {

                district = (((Item) cmb_present_district.getSelectedItem()).getValue().toString());
                upozila = (((Item) cmb_present_upozila.getSelectedItem()).getValue().toString());
                rmo = (((Item) cmb_present_rmo.getSelectedItem()).getValue().toString());

            } catch (Exception ex) {
            }

            if ((district != null && !district.isEmpty())
                    && (upozila != null && !upozila.isEmpty())
                    && (rmo != null && !rmo.isEmpty())) {

                //RMO code 2 is pouroshova and RMO code 9 is city corporation
                if ((rmo.equalsIgnoreCase("2"))
                        || (rmo.equalsIgnoreCase("9"))){
                        //|| (applicationData.getPresentRmo() != null && applicationData.getPresentRmo().equalsIgnoreCase("2"))
                        //|| (applicationData.getPresentRmo() != null && applicationData.getPresentRmo().equalsIgnoreCase("9"))) {

                 /*   if (applicationData.getPresentDistrict() != null) {
                        district = applicationData.getPresentDistrict();
                    }

                    if (applicationData.getPresentUpozila() != null) {
                        upozila = applicationData.getPresentUpozila();
                    }

                    if (applicationData.getPresentRmo() != null) {
                        rmo = applicationData.getPresentRmo();
                    } */

                    aem = new AddressEntityManagerBean();
                    List<City> cities = aem.getCityFindByDistUpoAndRmo(district, upozila, rmo);

                    cmb_present_city.removeAllItems();
                    cmb_present_city.addItem(new Item<String>("", "City Corp."));

                    int cnt = 0;
                    int selectedIndx = 0;

                    for (City ct : cities) {
                        ++cnt;
                        cmb_present_city.addItem(new Item<String>(ct.getId().toString(), ct.getNameEn()));
                        if (ct.getId().toString().equalsIgnoreCase(applicationData.getPresentCity())) {
                            selectedIndx = cnt;
                        }
                    }
                    cmb_present_city.setSelectedIndex(selectedIndx);
                    setted_present_city=(((Item) cmb_present_city.getItemAt(selectedIndx)).getValue().toString());

                } else {
                    //Condition for RMO which are neither pouroshova nor city corp.
                    cmb_present_city.removeAllItems();
                    cmb_present_city.addItem(new Item<String>("", "City Corp."));
                    cmb_present_city.addItem(new Item<String>("0", "N/A"));
                    if (applicationData.getPresentCity() != null && applicationData.getPresentCity().equalsIgnoreCase("0")) {
                        cmb_present_city.setSelectedIndex(1);
                    }
                }
            } else {

                cmb_present_city.removeAllItems();
                cmb_present_city.addItem(new Item<String>("", "City Corp."));

            }
        }

    }//GEN-LAST:event_cmb_present_rmoItemStateChanged

    private void cmb_present_cityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_cityItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;

            String upozila = null;
            String city = null;

            try {

                upozila = (((Item) cmb_present_upozila.getSelectedItem()).getValue().toString());
                city = (((Item) cmb_present_city.getSelectedItem()).getValue().toString());

            } catch (Exception ex) {
            }

            if ((upozila != null && !upozila.isEmpty())
                    && (city != null && !city.isEmpty())) {

                aem = new AddressEntityManagerBean();
                List<Eunion> eunions = aem.getEunionByUpoAndCity(Integer.parseInt(upozila), Integer.parseInt(city));

                cmb_present_eunion.removeAllItems();
                cmb_present_eunion.addItem(new Item<String>("", "Eunion"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Eunion eu : eunions) {
                    ++cnt;
                    cmb_present_eunion.addItem(new Item<String>(eu.getId().toString(), eu.getNameEn()));
                    if (eu.getId().equalsIgnoreCase(applicationData.getPresentEunion())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_present_eunion.setSelectedIndex(selectedIndx);
                setted_present_eunion=(((Item) cmb_present_eunion.getItemAt(selectedIndx)).getValue().toString());

            } else {

                cmb_present_eunion.removeAllItems();
                cmb_present_eunion.addItem(new Item<String>("", "Eunion"));

            }
        }

    }//GEN-LAST:event_cmb_present_cityItemStateChanged

    private void cmb_present_eunionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_eunionItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;
            String eunion = null;
            try {
                eunion = (((Item) cmb_present_eunion.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (eunion != null && !eunion.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<Area> areas = aem.getMouzaByEunion(Integer.parseInt(eunion));


                cmb_present_mouza.removeAllItems();
                cmb_present_mouza.addItem(new Item<String>("", "Mouza"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Area ar : areas) {
                    ++cnt;
                    cmb_present_mouza.addItem(new Item<String>(ar.getId(), ar.getNameEn()));
                    if (ar.getId().equalsIgnoreCase(applicationData.getPresentMouza())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_present_mouza.addItem(new Item<String>("999", "OTHER"));

                if (applicationData.getPresentMouza() != null && applicationData.getPresentMouza().equalsIgnoreCase("999")) {
                    selectedIndx = areas.size() + 1;
                }

                cmb_present_mouza.setSelectedIndex(selectedIndx);
                setted_present_mouza=(((Item) cmb_present_mouza.getItemAt(selectedIndx)).getValue().toString());

            } else {
                cmb_present_mouza.removeAllItems();
                cmb_present_mouza.addItem(new Item<String>("", "Mouza"));
            }
        }

    }//GEN-LAST:event_cmb_present_eunionItemStateChanged

    private void cmb_present_mouzaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_mouzaItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;
            String mouza = null;
            try {
                mouza = (((Item) cmb_present_mouza.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (mouza != null && !mouza.isEmpty()) {

                if (!mouza.equalsIgnoreCase("999")) {

                    //reset below as well when no item is selected
                    if (inp_present_mouza_otr.isEditable()) {
                        inp_present_mouza_otr.setEditable(false);
                        inp_present_mouza_otr.setText("");
                    }


                    aem = new AddressEntityManagerBean();
                    List<Village> villages = aem.getVillageByMouza(mouza);


                    cmb_present_village.removeAllItems();
                    cmb_present_village.addItem(new Item<String>("", "Village"));

                    int cnt = 0;
                    int selectedIndx = 0;

                    for (Village vl : villages) {
                        ++cnt;
                        cmb_present_village.addItem(new Item<String>(vl.getId(), vl.getNameEn()));
                        if (vl.getId().equalsIgnoreCase(applicationData.getPresentVillage())) {
                            selectedIndx = cnt;
                        }
                    }
                    cmb_present_village.addItem(new Item<String>("999", "OTHER"));

                    if (applicationData.getPresentVillage() != null && applicationData.getPresentVillage().equalsIgnoreCase("999")) {
                        selectedIndx = villages.size() + 1;
                    }

                    cmb_present_village.setSelectedIndex(selectedIndx);
                    setted_present_village=(((Item) cmb_present_village.getItemAt(selectedIndx)).getValue().toString());

                } else {

                    inp_present_mouza_otr.setEditable(true);
                    if (applicationData.getPresentMouzaOtr() != null) {
                        inp_present_mouza_otr.setText(applicationData.getPresentMouzaOtr());
                    }

                    cmb_present_village.removeAllItems();
                    cmb_present_village.addItem(new Item<String>("", "Village"));
                    cmb_present_village.addItem(new Item<String>("999", "OTHER"));

                }



            } else {
                if (inp_present_mouza_otr.isEditable()) {
                    inp_present_mouza_otr.setEditable(false);
                    inp_present_mouza_otr.setText("");
                }
                cmb_present_village.removeAllItems();
                cmb_present_village.addItem(new Item<String>("", "Village"));
            }
        }

    }//GEN-LAST:event_cmb_present_mouzaItemStateChanged

    private void cmb_present_villageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_villageItemStateChanged

        String village = null;
        try {
            village = (((Item) cmb_present_village.getSelectedItem()).getValue().toString());
        } catch (Exception ex) {
        }
        if (village != null && !village.isEmpty()) {

            if (!village.equalsIgnoreCase("999")) {

                if (inp_present_village_otr.isEditable()) {
                    inp_present_village_otr.setEditable(false);
                    inp_present_village_otr.setText("");
                }

            } else {

                inp_present_village_otr.setEditable(true);
                if (applicationData.getPresentVillageOtr() != null) {
                    inp_present_village_otr.setText(applicationData.getPresentVillageOtr());
                }

            }
        } else {

            if (inp_present_village_otr.isEditable()) {
                inp_present_village_otr.setEditable(false);
                inp_present_village_otr.setText("");
            }

        }

    }//GEN-LAST:event_cmb_present_villageItemStateChanged

    private void cmb_present_postofficeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_postofficeItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;
            String postoffice = null;
            try {
                postoffice = (((Item) cmb_present_postoffice.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (postoffice != null && !postoffice.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<Postoffice> postoffices = aem.getPostCodeByPostOffice(Integer.parseInt(postoffice));


                inp_present_postcode.setText(postoffices.get(0).getPostCode());

            } else {

                inp_present_postcode.setText("");

            }
        }

    }//GEN-LAST:event_cmb_present_postofficeItemStateChanged

    private void cmb_permanent_rmoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_rmoItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;

            String rmo = null;
            String district = null;
            String upozila = null;

            try {

                district = (((Item) cmb_permanent_district.getSelectedItem()).getValue().toString());
                upozila = (((Item) cmb_permanent_upozila.getSelectedItem()).getValue().toString());
                rmo = (((Item) cmb_permanent_rmo.getSelectedItem()).getValue().toString());

            } catch (Exception ex) {
            }

            if ((district != null && !district.isEmpty())
                    && (upozila != null && !upozila.isEmpty())
                    && (rmo != null && !rmo.isEmpty())) {

                //RMO code 2 is pouroshova and RMO code 9 is city corporation
                if ((rmo.equalsIgnoreCase("2"))
                        || (rmo.equalsIgnoreCase("9"))){
                        //|| (applicationData.getPermanentRmo() != null && applicationData.getPermanentRmo().equalsIgnoreCase("2"))
                        //|| (applicationData.getPermanentRmo() != null && applicationData.getPermanentRmo().equalsIgnoreCase("9"))) {

                   /* if (applicationData.getPermDistrict() != null) {
                        district = applicationData.getPermDistrict();
                    }

                    if (applicationData.getPermUpozila() != null) {
                        upozila = applicationData.getPresentUpozila();
                    }

                    if (applicationData.getPermanentRmo() != null) {
                        rmo = applicationData.getPermanentRmo();
                    } */

                    aem = new AddressEntityManagerBean();
                    List<City> cities = aem.getCityFindByDistUpoAndRmo(district, upozila, rmo);

                    cmb_permanent_city.removeAllItems();
                    cmb_permanent_city.addItem(new Item<String>("", "City Corp."));

                    int selectedIndx = 0;
                    int cnt = 0;

                    for (City ct : cities) {
                        ++cnt;
                        cmb_permanent_city.addItem(new Item<String>(ct.getId().toString(), ct.getNameEn()));
                        if (ct.getId().toString().equalsIgnoreCase(applicationData.getPermanentCity())) {
                            selectedIndx = cnt;
                        }
                    }
                    cmb_permanent_city.setSelectedIndex(selectedIndx);
                    setted_permanent_city=(((Item) cmb_permanent_city.getItemAt(selectedIndx)).getValue().toString());

                } else {
                    //Condition for RMO which are neither pouroshova nor city corp.
                    cmb_permanent_city.removeAllItems();
                    cmb_permanent_city.addItem(new Item<String>("", "City Corp."));
                    cmb_permanent_city.addItem(new Item<String>("0", "N/A"));

                    if (applicationData.getPermanentCity() != null && applicationData.getPermanentCity().equalsIgnoreCase("0")) {
                        cmb_permanent_city.setSelectedIndex(1);
                    }
                }
            } else {

                cmb_permanent_city.removeAllItems();
                cmb_permanent_city.addItem(new Item<String>("", "City Corp."));

            }
        }

    }//GEN-LAST:event_cmb_permanent_rmoItemStateChanged

    private void cmb_permanent_cityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_cityItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;

            String upozila = null;
            String city = null;

            try {

                upozila = (((Item) cmb_permanent_upozila.getSelectedItem()).getValue().toString());
                city = (((Item) cmb_permanent_city.getSelectedItem()).getValue().toString());

            } catch (Exception ex) {
            }

            if ((upozila != null && !upozila.isEmpty())
                    && (city != null && !city.isEmpty())) {

                aem = new AddressEntityManagerBean();
                List<Eunion> eunions = aem.getEunionByUpoAndCity(Integer.parseInt(upozila), Integer.parseInt(city));

                cmb_permanent_eunion.removeAllItems();
                cmb_permanent_eunion.addItem(new Item<String>("", "Eunion"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Eunion eu : eunions) {
                    ++cnt;
                    cmb_permanent_eunion.addItem(new Item<String>(eu.getId().toString(), eu.getNameEn()));
                    if (eu.getId().equalsIgnoreCase(applicationData.getPermanentEunion())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_permanent_eunion.setSelectedIndex(selectedIndx);
                setted_permanent_eunion=(((Item) cmb_permanent_eunion.getItemAt(selectedIndx)).getValue().toString());

            } else {

                cmb_permanent_eunion.removeAllItems();
                cmb_permanent_eunion.addItem(new Item<String>("", "Eunion"));

            }
        }

    }//GEN-LAST:event_cmb_permanent_cityItemStateChanged

    private void cmb_permanent_eunionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_eunionItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;
            String eunion = null;
            try {
                eunion = (((Item) cmb_permanent_eunion.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (eunion != null && !eunion.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<Area> areas = aem.getMouzaByEunion(Integer.parseInt(eunion));

                cmb_permanent_mouza.removeAllItems();
                cmb_permanent_mouza.addItem(new Item<String>("", "Mouza"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Area ar : areas) {
                    ++cnt;
                    cmb_permanent_mouza.addItem(new Item<String>(ar.getId(), ar.getNameEn()));
                    if (ar.getId().equalsIgnoreCase(applicationData.getPermanentMouza())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_permanent_mouza.addItem(new Item<String>("999", "OTHER"));

                if (applicationData.getPermanentMouza() != null && applicationData.getPermanentMouza().equalsIgnoreCase("999")) {
                    selectedIndx = areas.size() + 1;
                }

                cmb_permanent_mouza.setSelectedIndex(selectedIndx);
                setted_permanent_mouza=(((Item) cmb_permanent_mouza.getItemAt(selectedIndx)).getValue().toString());

            } else {
                cmb_permanent_mouza.removeAllItems();
                cmb_permanent_mouza.addItem(new Item<String>("", "Mouza"));
            }
        }

    }//GEN-LAST:event_cmb_permanent_eunionItemStateChanged

    private void cmb_permanent_mouzaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_mouzaItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;
            String mouza = null;
            try {
                mouza = (((Item) cmb_permanent_mouza.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (mouza != null && !mouza.isEmpty()) {

                if (!mouza.equalsIgnoreCase("999")) {

                    //reset below as well when no item is selected
                    if (inp_permanent_mouza_otr.isEditable()) {
                        inp_permanent_mouza_otr.setEditable(false);
                        inp_permanent_mouza_otr.setText("");
                    }


                    aem = new AddressEntityManagerBean();
                    List<Village> villages = aem.getVillageByMouza(mouza);


                    cmb_permanent_village.removeAllItems();
                    cmb_permanent_village.addItem(new Item<String>("", "Village"));

                    int cnt = 0;
                    int selectedIndx = 0;

                    for (Village vl : villages) {
                        ++cnt;
                        cmb_permanent_village.addItem(new Item<String>(vl.getId(), vl.getNameEn()));
                        if (vl.getId().equalsIgnoreCase(applicationData.getPermanentVillage())) {
                            selectedIndx = cnt;
                        }
                    }
                    cmb_permanent_village.addItem(new Item<String>("999", "OTHER"));

                    if (applicationData.getPermanentVillage() != null && applicationData.getPermanentVillage().equalsIgnoreCase("999")) {
                        selectedIndx = villages.size() + 1;
                    }

                    cmb_permanent_village.setSelectedIndex(selectedIndx);
                    setted_permanent_village=(((Item) cmb_permanent_village.getItemAt(selectedIndx)).getValue().toString());

                } else {

                    inp_permanent_mouza_otr.setEditable(true);

                    cmb_permanent_village.removeAllItems();
                    cmb_permanent_village.addItem(new Item<String>("", "Village"));
                    cmb_permanent_village.addItem(new Item<String>("999", "OTHER"));

                }



            } else {
                if (inp_permanent_mouza_otr.isEditable()) {
                    inp_permanent_mouza_otr.setEditable(false);
                    inp_permanent_mouza_otr.setText("");
                }
                cmb_permanent_village.removeAllItems();
                cmb_permanent_village.addItem(new Item<String>("", "Village"));
            }
        }

    }//GEN-LAST:event_cmb_permanent_mouzaItemStateChanged

    private void cmb_permanent_villageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_villageItemStateChanged

        String village = null;
        try {
            village = (((Item) cmb_permanent_village.getSelectedItem()).getValue().toString());
        } catch (Exception ex) {
        }
        if (village != null && !village.isEmpty()) {

            if (!village.equalsIgnoreCase("999")) {

                if (inp_permanent_village_otr.isEditable()) {
                    inp_permanent_village_otr.setEditable(false);
                    inp_permanent_village_otr.setText("");
                }

            } else {

                inp_permanent_village_otr.setEditable(true);
                if (applicationData.getPermanentVillageOtr() != null) {
                    inp_permanent_village_otr.setText(applicationData.getPermanentVillageOtr());
                }

            }
        } else {

            if (inp_permanent_village_otr.isEditable()) {
                inp_permanent_village_otr.setEditable(false);
                inp_permanent_village_otr.setText("");
            }

        }

    }//GEN-LAST:event_cmb_permanent_villageItemStateChanged

    private void cmb_permanent_postofficeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_postofficeItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            AddressEntityManagerBean aem;
            String postoffice = null;
            try {
                postoffice = (((Item) cmb_permanent_postoffice.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (postoffice != null && !postoffice.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<Postoffice> postoffices = aem.getPostCodeByPostOffice(Integer.parseInt(postoffice));


                inp_permanent_postcode.setText(postoffices.get(0).getPostCode());

            } else {

                inp_permanent_postcode.setText("");

            }
        }

    }//GEN-LAST:event_cmb_permanent_postofficeItemStateChanged

    private void cmb_present_upozilaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_present_upozilaItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            String upozila = null;
            try {
                upozila = (((Item) cmb_present_upozila.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (upozila != null && !upozila.isEmpty()) {

                cmb_present_rmo.removeAllItems();

                int selectedIndx = 0;
                int cnt = 0;
                for (Item it : RMO_LIST) {
                    cmb_present_rmo.addItem(it);
                    if (it.getValue().toString().equalsIgnoreCase(applicationData.getPresentRmo())) {
                        selectedIndx = cnt;
                    }
                    ++cnt;
                }

                cmb_present_rmo.setSelectedIndex(selectedIndx);
                setted_present_rmo=(((Item) cmb_present_rmo.getItemAt(selectedIndx)).getValue().toString());

            } else {
                cmb_present_rmo.removeAllItems();
                cmb_present_rmo.addItem(new Item<String>("", "R.M.O"));
            }
        }

    }//GEN-LAST:event_cmb_present_upozilaItemStateChanged

    private void cmb_permanent_upozilaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_permanent_upozilaItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            String upozila = null;
            try {
                upozila = (((Item) cmb_permanent_upozila.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (upozila != null && !upozila.isEmpty()) {

                cmb_permanent_rmo.removeAllItems();

                int selectedIndx = 0;
                int cnt = 0;
                for (Item it : RMO_LIST) {

                    cmb_permanent_rmo.addItem(it);
                    if (it.getValue().toString().equalsIgnoreCase(applicationData.getPermanentRmo())) {
                        selectedIndx = cnt;
                    }
                    ++cnt;

                }

                cmb_permanent_rmo.setSelectedIndex(selectedIndx);
                setted_permanent_rmo=(((Item) cmb_permanent_rmo.getItemAt(selectedIndx)).getValue().toString());

            } else {
                cmb_permanent_rmo.removeAllItems();
                cmb_permanent_rmo.addItem(new Item<String>("", "R.M.O"));
            }
        }

    }//GEN-LAST:event_cmb_permanent_upozilaItemStateChanged

    private void cmb_voter_atItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_voter_atItemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED) {

            String value = null;
            try {
                value = (((Item) cmb_voter_at.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }

            if (value != null && value.length() > 0) {

                String present_eunion_val = null;
                try {

                    if (applicationData.getPresentEunion() != null && applicationData.getPresentEunion().length() > 0) {
                        present_eunion_val = applicationData.getPresentEunion();
                    } else {
                        present_eunion_val = (((Item) cmb_present_eunion.getSelectedItem()).getValue().toString());
                    }
                } catch (Exception ex) {
                }

                String permanent_eunion_val = null;
                try {

                    if (applicationData.getPermanentEunion() != null && applicationData.getPermanentEunion().length() > 0) {
                        permanent_eunion_val = applicationData.getPermanentEunion();
                    } else {

                        permanent_eunion_val = (((Item) cmb_permanent_eunion.getSelectedItem()).getValue().toString());

                    }
                } catch (Exception ex) {
                }

                if (((present_eunion_val != null && present_eunion_val.length() > 0) && (permanent_eunion_val != null && permanent_eunion_val.length() > 0))) {

                    cmb_voter_area.setEnabled(true);
                    cmb_voter_area.setFont(new java.awt.Font("Kalpurush", 0, 11));

                    //fetch voter area based on selection
                    AddressEntityManagerBean aem;
                    String eunion_id = null;

                    if (value.equalsIgnoreCase("PRESENT")) {
                        eunion_id = present_eunion_val;
                    } else {
                        eunion_id = permanent_eunion_val;
                    }

                    if (eunion_id != null && eunion_id.length() > 0) {

                        aem = new AddressEntityManagerBean();
                        List<VoterArea> voterAreas = aem.getVoterAreaByEunion(eunion_id);

                        cmb_voter_area.removeAllItems();
                        cmb_voter_area.addItem(new Item<String>("", "Voter Area"));

                        int cnt = 0;
                        int selectedIndx = 0;

                        for (VoterArea va : voterAreas) {
                            ++cnt;
                            cmb_voter_area.addItem(new Item<String>(va.getId().toString(), va.getName()));
                            if (va.getId().equalsIgnoreCase(applicationData.getVoterArea())) {
                                selectedIndx = cnt;
                            }
                        }
                        cmb_voter_area.setSelectedIndex(selectedIndx);
                        setted_voter_area=(((Item) cmb_voter_area.getSelectedItem()).getValue().toString());

                    }

                } else {

                    if (cmb_voter_area.isEnabled()) {
                        cmb_voter_area.setEnabled(false);
                    }
                    cmb_voter_at.setSelectedIndex(0);
                    JOptionPane.showMessageDialog(null, "Please select your present and/or permanent eunion", "ERROR", JOptionPane.ERROR_MESSAGE);

                }

            } else {

                cmb_voter_area.setEnabled(false);
                cmb_voter_area.removeAllItems();

            }

        }

    }//GEN-LAST:event_cmb_voter_atItemStateChanged

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
//        setPlaceHolder();
//        resetEnrollmentApplication();
    }//GEN-LAST:event_formComponentShown

    private void content_panelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_content_panelComponentShown
    }//GEN-LAST:event_content_panelComponentShown
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel address_base_panel;
    private javax.swing.JButton btn_attachment;
    private javax.swing.JButton btn_reset;
    private javax.swing.JButton btn_save;
    public static com.toedter.calendar.JDateChooser cal_date_of_birth;
    public static com.toedter.calendar.JDateChooser cal_nid_issue_date;
    public static javax.swing.JCheckBox chk_fp_not_ten_fingers;
    public static javax.swing.JCheckBox chk_handicap_amputant;
    public static javax.swing.JCheckBox chk_handicap_deaf;
    public static javax.swing.JCheckBox chk_handicap_mute;
    public static javax.swing.JCheckBox chk_handicap_others;
    public static javax.swing.JCheckBox chk_handicap_speech;
    public static javax.swing.JCheckBox chk_handicap_visual;
    public static javax.swing.JCheckBox chk_sd_citizenship;
    public static javax.swing.JCheckBox chk_sd_marriage;
    public static javax.swing.JCheckBox chk_sd_other;
    public static javax.swing.JCheckBox chk_sd_transfer;
    public static javax.swing.JCheckBox chk_sd_utility;
    public static javax.swing.JComboBox cmb_birth_place_district;
    public static javax.swing.JComboBox cmb_blood_grp;
    public static javax.swing.JComboBox cmb_education;
    public javax.swing.JComboBox cmb_marital_status;
    public static javax.swing.JComboBox cmb_permanent_city;
    public static javax.swing.JComboBox cmb_permanent_district;
    public static javax.swing.JComboBox cmb_permanent_division;
    public static javax.swing.JComboBox cmb_permanent_eunion;
    public static javax.swing.JComboBox cmb_permanent_mouza;
    public static javax.swing.JComboBox cmb_permanent_postoffice;
    public static javax.swing.JComboBox cmb_permanent_rmo;
    public static javax.swing.JComboBox cmb_permanent_upozila;
    public static javax.swing.JComboBox cmb_permanent_village;
    public static javax.swing.JComboBox cmb_present_city;
    public static javax.swing.JComboBox cmb_present_district;
    public static javax.swing.JComboBox cmb_present_division;
    public static javax.swing.JComboBox cmb_present_eunion;
    public static javax.swing.JComboBox cmb_present_mouza;
    public static javax.swing.JComboBox cmb_present_postoffice;
    public static javax.swing.JComboBox cmb_present_rmo;
    public static javax.swing.JComboBox cmb_present_upozila;
    public static javax.swing.JComboBox cmb_present_village;
    public static javax.swing.JComboBox cmb_profession;
    public static javax.swing.JComboBox cmb_religion;
    public static javax.swing.JComboBox cmb_voter_area;
    public static javax.swing.JComboBox cmb_voter_at;
    private javax.swing.JPanel content_panel;
    private javax.swing.ButtonGroup genderButtonGroup;
    public static javax.swing.JTextField inp_birth_registration_no;
    public static javax.swing.JTextField inp_drv_license;
    public static javax.swing.JTextField inp_email;
    public javax.swing.JTextField inp_father_nid;
    public static javax.swing.JTextField inp_mobile;
    public javax.swing.JTextField inp_mother_nid;
    public javax.swing.JTextField inp_name_bangla;
    public javax.swing.JTextField inp_name_english;
    public javax.swing.JTextField inp_name_father;
    public javax.swing.JTextField inp_name_mother;
    public javax.swing.JTextField inp_name_spouse;
    public static javax.swing.JTextField inp_nationality;
    public static javax.swing.JTextField inp_nid;
    public static javax.swing.JTextField inp_nid_old;
    public static javax.swing.JTextField inp_passport;
    public static javax.swing.JTextField inp_permanent_house;
    public static javax.swing.JTextField inp_permanent_mouza_otr;
    public static javax.swing.JTextField inp_permanent_postcode;
    public static javax.swing.JTextField inp_permanent_village_otr;
    public static javax.swing.JTextField inp_present_house;
    public static javax.swing.JTextField inp_present_mouza_otr;
    public static javax.swing.JTextField inp_present_postcode;
    public static javax.swing.JTextField inp_present_village_otr;
    public static javax.swing.JTextField inp_remark_fp;
    public javax.swing.JTextField inp_spouse_nid;
    public static javax.swing.JTextField inp_telephone;
    public static javax.swing.JTextField inp_tin_no;
    public static javax.swing.JTextField inp_uim;
    private javax.swing.JLabel lbl_add_voter_area;
    private javax.swing.JLabel lbl_add_voter_at;
    private javax.swing.JLabel lbl_address_header;
    private javax.swing.JLabel lbl_biometric_header;
    private javax.swing.JLabel lbl_birth_registration_no;
    private javax.swing.JLabel lbl_blood_grp;
    private javax.swing.JLabel lbl_certi_issue_dist;
    private javax.swing.JLabel lbl_citizenship_header;
    private javax.swing.JLabel lbl_date_of_birth;
    private javax.swing.JLabel lbl_documents_header;
    private javax.swing.JLabel lbl_edu_occu_rel;
    private javax.swing.JLabel lbl_father_nid;
    private javax.swing.JLabel lbl_fp_container_left;
    private javax.swing.JLabel lbl_fp_container_right;
    public static javax.swing.JLabel lbl_fp_li;
    public static javax.swing.JLabel lbl_fp_lm;
    public static javax.swing.JLabel lbl_fp_lp;
    public static javax.swing.JLabel lbl_fp_lr;
    public static javax.swing.JLabel lbl_fp_lt;
    public static javax.swing.JLabel lbl_fp_ri;
    public static javax.swing.JLabel lbl_fp_rm;
    public static javax.swing.JLabel lbl_fp_rp;
    public static javax.swing.JLabel lbl_fp_rr;
    public static javax.swing.JLabel lbl_fp_rt;
    private javax.swing.JLabel lbl_gender;
    private javax.swing.JLabel lbl_hadicap_header;
    public static javax.swing.JLabel lbl_left_eye;
    private javax.swing.JLabel lbl_marital_status;
    private javax.swing.JLabel lbl_misc_header;
    private javax.swing.JLabel lbl_mother_nid;
    private javax.swing.JLabel lbl_name_bangla;
    private javax.swing.JLabel lbl_name_english;
    private javax.swing.JLabel lbl_name_father;
    private javax.swing.JLabel lbl_name_mother;
    private javax.swing.JLabel lbl_name_spouse;
    private javax.swing.JLabel lbl_national_id;
    private javax.swing.JLabel lbl_nationality;
    private javax.swing.JLabel lbl_nid_issue_date;
    private javax.swing.JLabel lbl_nid_old;
    private javax.swing.JLabel lbl_pass_tin_drv;
    private javax.swing.JLabel lbl_permanent_add_header;
    private javax.swing.JLabel lbl_permanent_city;
    private javax.swing.JLabel lbl_permanent_district;
    private javax.swing.JLabel lbl_permanent_division;
    private javax.swing.JLabel lbl_permanent_eunion;
    private javax.swing.JLabel lbl_permanent_house;
    private javax.swing.JLabel lbl_permanent_mouza;
    private javax.swing.JLabel lbl_permanent_postcode;
    private javax.swing.JLabel lbl_permanent_postoffice;
    private javax.swing.JLabel lbl_permanent_rmo;
    private javax.swing.JLabel lbl_permanent_upozila;
    private javax.swing.JLabel lbl_permanent_village;
    private javax.swing.JLabel lbl_personal_dtls_header;
    public static javax.swing.JLabel lbl_photo;
    private javax.swing.JLabel lbl_present_add_header;
    private javax.swing.JLabel lbl_present_city;
    private javax.swing.JLabel lbl_present_district;
    private javax.swing.JLabel lbl_present_division;
    private javax.swing.JLabel lbl_present_eunion;
    private javax.swing.JLabel lbl_present_house;
    private javax.swing.JLabel lbl_present_mouza;
    private javax.swing.JLabel lbl_present_postcode;
    private javax.swing.JLabel lbl_present_postoffice;
    private javax.swing.JLabel lbl_present_rmo;
    private javax.swing.JLabel lbl_present_upozila;
    private javax.swing.JLabel lbl_present_village;
    public static javax.swing.JLabel lbl_right_eye;
    public static javax.swing.JLabel lbl_signature;
    private javax.swing.JLabel lbl_spouse_nid;
    private javax.swing.JLabel lbl_tel_cell_mail;
    private javax.swing.JLabel lbl_uim;
    private javax.swing.JLabel lbll_fp_container;
    private javax.swing.JPanel permanent_add_panel;
    private javax.swing.JPanel present_add_panel;
    public static javax.swing.JRadioButton rdo_gender_female;
    public static javax.swing.JRadioButton rdo_gender_male;
    public static javax.swing.JRadioButton rdo_gender_third;
    private javax.swing.JScrollPane scr_address;
    private javax.swing.JScrollPane scrp_handi_othern;
    private javax.swing.JSeparator separator_add_permanent;
    private javax.swing.JSeparator separator_add_present;
    private javax.swing.JSeparator separator_address;
    private javax.swing.JSeparator separator_bio_horizontal;
    private javax.swing.JSeparator separator_biometric;
    private javax.swing.JSeparator separator_citizenship;
    private javax.swing.JSeparator separator_docs;
    private javax.swing.JSeparator separator_handicap;
    private javax.swing.JSeparator separator_misc;
    private javax.swing.JSeparator separator_personal_dtls;
    public static javax.swing.JTextArea txt_handicap_remarks;
    // End of variables declaration//GEN-END:variables

    private void setPlaceHolder() {
        
        applicationData = new ApplicationData();

        PromptSupport.setPrompt("Name Bangla", inp_name_bangla);
        PromptSupport.setForeground(Color.GRAY, inp_name_bangla);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_name_bangla);

        PromptSupport.setPrompt("Name English", inp_name_english);
        PromptSupport.setForeground(Color.GRAY, inp_name_english);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_name_english);

        PromptSupport.setPrompt("Spouse Name", inp_name_spouse);
        PromptSupport.setForeground(Color.GRAY, inp_name_spouse);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_name_spouse);

        PromptSupport.setPrompt("Mother Name", inp_name_mother);
        PromptSupport.setForeground(Color.GRAY, inp_name_mother);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_name_mother);

        PromptSupport.setPrompt("Father Name", inp_name_father);
        PromptSupport.setForeground(Color.GRAY, inp_name_father);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_name_father);

        PromptSupport.setPrompt("Spouse's NID", inp_spouse_nid);
        PromptSupport.setForeground(Color.GRAY, inp_spouse_nid);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_spouse_nid);

        PromptSupport.setPrompt("Mother's NID", inp_mother_nid);
        PromptSupport.setForeground(Color.GRAY, inp_mother_nid);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_mother_nid);

        PromptSupport.setPrompt("Father's NID", inp_father_nid);
        PromptSupport.setForeground(Color.GRAY, inp_father_nid);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_father_nid);

        PromptSupport.setPrompt("10 digit NID", inp_nid);
        PromptSupport.setForeground(Color.GRAY, inp_nid);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_nid);

        PromptSupport.setPrompt("17 digit NID (PIN)", inp_nid_old);
        PromptSupport.setForeground(Color.GRAY, inp_nid_old);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_nid_old);

        PromptSupport.setPrompt("Nationality", inp_nationality);
        PromptSupport.setForeground(Color.GRAY, inp_nationality);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_nationality);

        PromptSupport.setPrompt("17 digit Birth Reg. No.", inp_birth_registration_no);
        PromptSupport.setForeground(Color.GRAY, inp_birth_registration_no);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_birth_registration_no);

        PromptSupport.setPrompt("Additional Mouza", inp_present_mouza_otr);
        PromptSupport.setForeground(Color.GRAY, inp_present_mouza_otr);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_present_mouza_otr);

        PromptSupport.setPrompt("Additional Village", inp_present_village_otr);
        PromptSupport.setForeground(Color.GRAY, inp_present_village_otr);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_present_village_otr);

        PromptSupport.setPrompt("Additional Mouza", inp_permanent_mouza_otr);
        PromptSupport.setForeground(Color.GRAY, inp_permanent_mouza_otr);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_permanent_mouza_otr);

        PromptSupport.setPrompt("Additional Village", inp_permanent_village_otr);
        PromptSupport.setForeground(Color.GRAY, inp_permanent_village_otr);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_permanent_village_otr);

        PromptSupport.setPrompt("Remarks", txt_handicap_remarks);
        PromptSupport.setForeground(Color.GRAY, txt_handicap_remarks);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, txt_handicap_remarks);

        PromptSupport.setPrompt("Remarks", inp_remark_fp);
        PromptSupport.setForeground(Color.GRAY, inp_remark_fp);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_remark_fp);

        PromptSupport.setPrompt("Telephone", inp_telephone);
        PromptSupport.setForeground(Color.GRAY, inp_telephone);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_telephone);

        PromptSupport.setPrompt("Mobile", inp_mobile);
        PromptSupport.setForeground(Color.GRAY, inp_mobile);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_mobile);

        PromptSupport.setPrompt("Email", inp_email);
        PromptSupport.setForeground(Color.GRAY, inp_email);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_email);

        PromptSupport.setPrompt("Passport No.", inp_passport);
        PromptSupport.setForeground(Color.GRAY, inp_passport);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_passport);

        PromptSupport.setPrompt("TIN No.", inp_tin_no);
        PromptSupport.setForeground(Color.GRAY, inp_tin_no);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_tin_no);

        PromptSupport.setPrompt("Driving License No.", inp_drv_license);
        PromptSupport.setForeground(Color.GRAY, inp_drv_license);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, inp_drv_license);

    }

    public void viewDetails(String detailsId) {
        CardLayout card1 = (CardLayout) imagePanel1.getLayout();
        card1.show(imagePanel1, "app");
        System.err.println("AIDA ki MAMA - > " +detailsId);

//    applicationMenu.setBackground(new Color(51,153,255));

        /*ContainerJFrame.applicationMenu.setBackground(new Color(204, 204, 204));
         ContainerJFrame.applicationMenu.setBorder(javax.swing.BorderFactory.createLineBorder(Color.DARK_GRAY, 1, false));
         ContainerJFrame.applicationMenu.setBorderPainted(true);
         ContainerJFrame.applicationMenu.setOpaque(true);
         ContainerJFrame.applicationMenu.setSelected(true);
         ContainerJFrame.registrationMenu.setBackground(new Color(240, 240, 240));
         ContainerJFrame.registrationMenu.setOpaque(false);
         ContainerJFrame.registrationMenu.setSelected(false);
         ContainerJFrame.registrationMenu.setBorderPainted(false);
         ContainerJFrame.dashboardMenu.setBackground(new Color(240, 240, 240));
         ContainerJFrame.dashboardMenu.setOpaque(false);
         ContainerJFrame.dashboardMenu.setSelected(false);
         ContainerJFrame.dashboardMenu.setBorderPainted(false);
         ContainerJFrame.nidRegisterMenu.setBackground(new Color(240, 240, 240));
         ContainerJFrame.nidRegisterMenu.setOpaque(false);
         ContainerJFrame.nidRegisterMenu.setSelected(false);
         ContainerJFrame.nidRegisterMenu.setBorderPainted(false);*/

        applicationData = new ApplicationData();

        BioPerson bioData = new BioPerson();
        PersonManagerBean pmb = new PersonManagerBean();

        GetPersonSummaryResponse resp = pmb.getSinglePersonInfo(detailsId);
        if (resp != null && resp.isOperationStatus() && resp.getSinglePerson() != null) {
            populateFormByDatabaseData(resp.getSinglePerson());
        } else {
            JOptionPane.showMessageDialog(null, "No Data Found", "INFO", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private void populateFormByDatabaseData(BioPerson bioPerson) {

        applicationData = new ApplicationData();
        applicationData.setId(bioPerson.getId());
        
        cmb_present_division.removeAllItems();
        
        for (Division dv : Lookup.DIVISION_LIST) {
        cmb_present_division.addItem(new Item<String>(dv.getId(), dv.getNameEn()));
        }        
        
        
        
        
        System.out.println("populate");

        //Attachment population
        BioAttachmentEntityManagerBean bmb = new BioAttachmentEntityManagerBean();

        List<BioAttachment> bioAttachmentList = bmb.getAttachmentFindByPersonId(bioPerson.getId());

        if (bioAttachmentList != null && bioAttachmentList.size() > 0) {
            String aType = "";
            //System.out.println("HOHGJGJGOGOJGJGJJGJGJKLJKGJGJGJGJ");
            for (BioAttachment ba : bioAttachmentList) {
                if (ba.getAttachmentType() != null && !ba.getAttachmentType().isEmpty()) {
                    aType = ba.getAttachmentType();

                    if (aType.equalsIgnoreCase(Scanner.TYPE_CITIZENSHIP)) {
                        applicationData.setCitizenshipAttachment1(ba.getAttachmentOne());
                        applicationData.setCitizenshipAttachment2(ba.getAttachmentTwo());

                        chk_sd_citizenship.setSelected(true);


                    } else if (aType.equalsIgnoreCase(Scanner.TYPE_MARRIAGE)) {
                        applicationData.setMarriageAttachment1(ba.getAttachmentOne());
                        applicationData.setMarriageAttachment2(ba.getAttachmentTwo());
                        chk_sd_marriage.setSelected(true);
                    } else if (aType.equalsIgnoreCase(Scanner.TYPE_OTHER)) {
                        applicationData.setOtherAttachment1(ba.getAttachmentOne());
                        applicationData.setOtherAttachment2(ba.getAttachmentTwo());
                        chk_sd_other.setSelected(true);
                    } else if (aType.equalsIgnoreCase(Scanner.TYPE_UTILITY)) {
                        applicationData.setUtilityAttachment1(ba.getAttachmentOne());
                        applicationData.setUtilityAttachment2(ba.getAttachmentTwo());
                        chk_sd_utility.setSelected(true);
                    } else if (aType.equalsIgnoreCase(Scanner.TYPE_TRANSFER)) {
                        applicationData.setTransferAttachment1(ba.getAttachmentOne());
                        applicationData.setTransferAttachment2(ba.getAttachmentTwo());
                        chk_sd_transfer.setSelected(true);
                    }
                }
            }
        }
        
        
        //Biometric population
        if (bioPerson.getBiometric() != null) {
            business.entity.BioBiometric bio = bioPerson.getBiometric();
            applicationData.setBiometricId(bio.getId());
            applicationData.setWsqLt(bio.getWsqLt());
            applicationData.setWsqLi(bio.getWsqLi());
            applicationData.setWsqLm(bio.getWsqLm());
            applicationData.setWsqLr(bio.getWsqLr());
            applicationData.setWsqLl(bio.getWsqLl());

            applicationData.setWsqRt(bio.getWsqRt());
            applicationData.setWsqRi(bio.getWsqRi());
            applicationData.setWsqRm(bio.getWsqRm());
            applicationData.setWsqRr(bio.getWsqRr());
            applicationData.setWsqRl(bio.getWsqRl());

            if (bio.getPhoto() != null) {
                try {
                    BufferedImage bim = ImageAndFileProcessing.ByteArrayToBufferedImage(bio.getPhoto());
                    ApplicationNidPanel.lbl_photo.setIcon(new ImageIcon(bim.getScaledInstance(ApplicationNidPanel.lbl_photo.getWidth(), ApplicationNidPanel.lbl_photo.getHeight(), java.awt.Image.SCALE_DEFAULT)));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                ApplicationNidPanel.lbl_photo.setIcon(null);
                System.out.println("photo is null !!!!!!!!!!!!!!!!!!");
            }

            if (bio.getSignature() != null) {
                try {
                    BufferedImage bim = ImageAndFileProcessing.ByteArrayToBufferedImage(bio.getSignature());
                    ApplicationNidPanel.lbl_signature.setIcon(new ImageIcon(bim.getScaledInstance(ApplicationNidPanel.lbl_signature.getWidth(), ApplicationNidPanel.lbl_signature.getHeight(), java.awt.Image.SCALE_DEFAULT)));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                ApplicationNidPanel.lbl_signature.setIcon(null);
                System.out.println("signature is null !!!!!!!!!!!!!!!!!!");
            }


            showWsqImageinJLabel(lbl_fp_lt, bio.getWsqLt());
            showWsqImageinJLabel(lbl_fp_li, bio.getWsqLi());
            showWsqImageinJLabel(lbl_fp_lm, bio.getWsqLm());
            showWsqImageinJLabel(lbl_fp_lr, bio.getWsqLr());
            showWsqImageinJLabel(lbl_fp_lp, bio.getWsqLl());

            showWsqImageinJLabel(lbl_fp_rt, bio.getWsqRt());
            showWsqImageinJLabel(lbl_fp_ri, bio.getWsqRi());
            showWsqImageinJLabel(lbl_fp_rm, bio.getWsqRm());
            showWsqImageinJLabel(lbl_fp_rr, bio.getWsqRr());
            showWsqImageinJLabel(lbl_fp_rp, bio.getWsqRl());

            //marzuq (eye)
            //left
            if (bio.getEyeLeft() != null) {
                try {
                    BufferedImage bieye = IrisUtils.getGrayscale(640, 480, bio.getEyeLeft());

                    ApplicationNidPanel.lbl_left_eye.setText(null);
                    ApplicationNidPanel.lbl_left_eye.setIcon(new ImageIcon(bieye.getScaledInstance(ApplicationNidPanel.lbl_left_eye.getWidth(), ApplicationNidPanel.lbl_left_eye.getHeight(), java.awt.Image.SCALE_DEFAULT)));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                ApplicationNidPanel.lbl_left_eye.setIcon(null);
                System.out.println("left eye is null !!!!!!!!!!!!!!!!!!");
            }

            //right
            if (bio.getEyeRight() != null) {
                try {
                    BufferedImage bieye = IrisUtils.getGrayscale(640, 480, bio.getEyeRight());
                    ApplicationNidPanel.lbl_right_eye.setText(null);
                    ApplicationNidPanel.lbl_right_eye.setIcon(new ImageIcon(bieye.getScaledInstance(ApplicationNidPanel.lbl_right_eye.getWidth(), ApplicationNidPanel.lbl_right_eye.getHeight(), java.awt.Image.SCALE_DEFAULT)));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                ApplicationNidPanel.lbl_right_eye.setIcon(null);
                System.out.println("right eye is null !!!!!!!!!!!!!!!!!!");
            }

            applicationData.setLeft_eye(bio.getEyeLeft());
            applicationData.setRight_eye(bio.getEyeRight());

            //marzuq (eye)


            applicationData.setSignature(bio.getSignature());
            applicationData.setFingerRemarks(bio.getFingerRemarks());
            inp_remark_fp.setText(bio.getFingerRemarks());
            if (bio.getFingerRemarks() != null && !bio.getFingerRemarks().isEmpty()) {
                chk_fp_not_ten_fingers.setSelected(true);
            }

        }

        //Text and other data population

        inp_name_bangla.setText(bioPerson.getNameBn());
        inp_name_english.setText(bioPerson.getNameEn());

        if (bioPerson.getGender() != null && !bioPerson.getGender().isEmpty()) {
            applicationData.setGender(bioPerson.getGender());

            if (applicationData.getGender().equalsIgnoreCase(Lookup.MALE)) {
                rdo_gender_male.setSelected(true);
            } else if (applicationData.getGender().equalsIgnoreCase(Lookup.FEMALE)) {
                rdo_gender_female.setSelected(true);
            } else if (applicationData.getGender().equalsIgnoreCase(Lookup.THIRD_GENDER)) {
                rdo_gender_third.setSelected(true);
            }
        }

        inp_name_father.setText(bioPerson.getFatherName());
        inp_father_nid.setText(bioPerson.getFatherNid());
        inp_name_mother.setText(bioPerson.getMotherName());
        inp_mother_nid.setText(bioPerson.getMotherNid());
        inp_name_spouse.setText(bioPerson.getSpouseName());
        inp_spouse_nid.setText(bioPerson.getSpouseNid());
        applicationData.setMaritalStatus(bioPerson.getMaritalStatus());
        setSelectedValueLookup(cmb_marital_status, bioPerson.getMaritalStatus(), Lookup.MARITAL_STATUS_LIST);
        inp_nid.setText(bioPerson.getNidNumber());
        if (bioPerson.getNidIssueDate() != null) {
            try {
                cal_nid_issue_date.setDate(Defs.SDF.parse(bioPerson.getNidIssueDate()));
            } catch (Exception ex) {
            }
        }

        applicationData.setBirthDistrict(bioPerson.getBirthDistrict());
        setSelectedValueDistrict(cmb_birth_place_district, bioPerson.getBirthDistrict());

        inp_nid_old.setText(bioPerson.getPinNo());
        if (bioPerson.getDateOfBirth() != null) {
            try {
                cal_date_of_birth.setDate(Defs.SDF.parse(bioPerson.getDateOfBirth()));
            } catch (Exception ex) {
            }
        }
        inp_nationality.setText(bioPerson.getNationality());
        inp_birth_registration_no.setText(bioPerson.getBirthRegistrationNumber());
        applicationData.setBloodGroup(bioPerson.getBloodGroup());
        setSelectedValueLookup(cmb_blood_grp, bioPerson.getBloodGroup(), Lookup.BLOOD_GRP_LIST);
        inp_uim.setText(bioPerson.getUniqueIdentificationMark());

        //Address details missing

//        applicationData.setNidIssueDivision(bioPerson.getNidIssueDivision());

        applicationData.setPresentDivision(bioPerson.getPresentDivision());
        applicationData.setPresentDistrict(bioPerson.getPresentDistrict());
        applicationData.setPresentUpozila(bioPerson.getPresentUpozila());
        applicationData.setPresentRmo(bioPerson.getPresentRmo());
        applicationData.setPresentCity(bioPerson.getPresentCity());
        applicationData.setPresentEunion(bioPerson.getPresentEunion());
        applicationData.setPresentMouza(bioPerson.getPresentMouza());
        applicationData.setPresentMouzaOtr(bioPerson.getPresentMouzaOtr());
        inp_present_mouza_otr.setText(bioPerson.getPresentMouzaOtr());
        applicationData.setPresentVillage(bioPerson.getPresentVillage());
        applicationData.setPresentVillageOtr(bioPerson.getPresentVillageOtr());
        inp_present_village_otr.setText(bioPerson.getPresentVillageOtr());
        applicationData.setPresentHouseNo(bioPerson.getPresentStreet());
        inp_present_house.setText(bioPerson.getPresentStreet());
        applicationData.setPresentPostOffice(bioPerson.getPresentPostOffice());
        applicationData.setPresentPostCode(bioPerson.getPresentPostCode());
        inp_present_postcode.setText(bioPerson.getPresentPostCode()); 

        applicationData.setPermDivision(bioPerson.getPermDivision());
        applicationData.setPermDistrict(bioPerson.getPermDistrict());
        applicationData.setPermUpozila(bioPerson.getPermUpozila());
        applicationData.setPermanentRmo(bioPerson.getPermanentRmo());
        applicationData.setPermanentCity(bioPerson.getPermanentCity());
        applicationData.setPermanentEunion(bioPerson.getPermanentEunion());
        applicationData.setPermanentMouza(bioPerson.getPermanentMouza());
        applicationData.setPermanentMouzaOtr(bioPerson.getPermanentMouzaOtr());
        inp_present_mouza_otr.setText(bioPerson.getPermanentMouzaOtr());
        applicationData.setPermanentVillage(bioPerson.getPermanentVillage());
        applicationData.setPermanentVillageOtr(bioPerson.getPermanentVillageOtr());
        inp_present_village_otr.setText(bioPerson.getPresentVillageOtr()); 
        inp_permanent_village_otr.setText(bioPerson.getPermanentVillageOtr()); 
        
        String pvo=inp_permanent_village_otr.getText();         //dummy

        applicationData.setVoterArea(bioPerson.getVoterArea());
        applicationData.setVoterAt(bioPerson.getVoterAt());
        setSelectedValueLookup(cmb_voter_at, bioPerson.getVoterAt(), Lookup.VOTER_AT_LIST);

        pvo=inp_permanent_village_otr.getText();         //dummy

        applicationData.setPermanentHouseNo(bioPerson.getPermStreet());
        inp_permanent_house.setText(bioPerson.getPermStreet());

        applicationData.setPermanentPostOffice(bioPerson.getPermanentPostOffice());
        applicationData.setPermanentPostCode(bioPerson.getPermanentPostCode());
        inp_present_postcode.setText(bioPerson.getPermanentPostCode());
        pvo=inp_permanent_village_otr.getText();         //dummy
        applicationData.setPermDivision(bioPerson.getPermDivision());
        applicationData.setPermDistrict(bioPerson.getPermDistrict());
        applicationData.setPermUpozila(bioPerson.getPermUpozila());

        //new code for setting present and permanent district
        setSelectedValueDivision(cmb_present_division, bioPerson.getPresentDivision());
        //setSelectedValueDistrict(cmb_present_district, bioPerson.getPresentDistrict());
        //setSelectedValueUpozilla(cmb_present_upozila, bioPerson.getPresentUpozila());
        setSelectedValueDivision(cmb_permanent_division, bioPerson.getPermDivision());
        //setSelectedValueDistrict(cmb_permanent_district, bioPerson.getPermDistrict());
        //setSelectedValueUpozilla(cmb_present_upozila, bioPerson.getPermUpozila()); 

        //Address details missing
        pvo=inp_permanent_village_otr.getText();         //dummy
        if (bioPerson.getHandicapInfo() != null && !bioPerson.getHandicapInfo().isEmpty()) {
            String[] comSeps = bioPerson.getHandicapInfo().split(",");

            for (int i = 0; i < comSeps.length; i++) {

                if (comSeps[i].equalsIgnoreCase("amputent")) {
                    chk_handicap_amputant.setSelected(true);
                }
                if (comSeps[i].equalsIgnoreCase("deaf")) {
                    chk_handicap_deaf.setSelected(true);
                }
                if (comSeps[i].equalsIgnoreCase("mute")) {
                    chk_handicap_mute.setSelected(true);
                }
                if (comSeps[i].equalsIgnoreCase("others")) {
                    chk_handicap_others.setSelected(true);
                }
                if (comSeps[i].equalsIgnoreCase("speech")) {
                    chk_handicap_speech.setSelected(true);
                }
                if (comSeps[i].equalsIgnoreCase("visual")) {
                    chk_handicap_visual.setSelected(true);
                }
            }
        }

        pvo=inp_permanent_village_otr.getText();         //dummy        
        
        txt_handicap_remarks.setText(bioPerson.getHandicapRemarks());

        applicationData.setEducationLevel(bioPerson.getEducationLevel());
        setSelectedValueLookup(cmb_education, bioPerson.getEducationLevel(), Lookup.EDUCATION_LIST);
        applicationData.setProfession(bioPerson.getProfession());
        setSelectedValueLookup(cmb_profession, bioPerson.getProfession(), Lookup.PROFESSION_LIST);
        applicationData.setReligion(bioPerson.getReligion());
        setSelectedValueLookup(cmb_religion, bioPerson.getReligion(), Lookup.RELIGION_LIST);

        inp_telephone.setText(bioPerson.getPhone());
        inp_mobile.setText(bioPerson.getMobile());
        inp_email.setText(bioPerson.getEmail());

        inp_passport.setText(bioPerson.getDlNumber());
        inp_tin_no.setText(bioPerson.getTin());
        inp_drv_license.setText(bioPerson.getPassport()); 
        
        //setting present district
        try{
        if(!applicationData.getPresentDistrict().equals(setted_present_district)){
        setPresentDistrict();
        }
        if(!applicationData.getPresentUpozila().equals(setted_present_upozila)){
            setPresentUpozila();
        }
        if(!applicationData.getPresentPostOffice().equals(setted_present_postoffice)){
           setPresentPostOffice();
        } 
        if(!applicationData.getPresentRmo().equals(setted_present_rmo)){
           setPresentRmo();
        } 
        if(!applicationData.getPresentCity().equals(setted_present_city)){
            setPresentCity();
        }
        if(!applicationData.getPresentEunion().equals(setted_present_eunion))
        {
            setPresentEunion();
        }
        if(!applicationData.getPresentMouza().equals(setted_present_mouza))
        {
            setPresentMouza();
        }
        if(!applicationData.getPresentVillage().equals(setted_present_village))
        {
            setPresentVillage();
        }
        }catch(Exception ex){
            System.out.println("Database incomplete 1");
        }
        
        
        //setting permanent district
        try{
        if(!applicationData.getPermDistrict().equals(setted_permanent_district)){
            setPermanentDistrict();
        }
        if(!applicationData.getPermUpozila().equals(setted_permanent_upozila)){
            setPermanentUpozila();
        }
        if(!applicationData.getPermanentPostOffice().equals(setted_permanent_postoffice)){
           setPermanentPostOffice();
        } 
        if(!applicationData.getPermanentRmo().equals(setted_permanent_rmo)){
           setPermanentRmo();
        } 
        
        if(!applicationData.getPermanentCity().equals(setted_permanent_city)){
            setPermanentCity();
        }
        if(!applicationData.getPermanentEunion().equals(setted_permanent_eunion))
        {
            setPermanentEunion();
        }
        if(!applicationData.getPermanentMouza().equals(setted_permanent_mouza))
        {
            setPermanentMouza();
        }
        if(!applicationData.getPermanentVillage().equals(setted_permanent_village))
        {
            setPermanentVillage();
        }
        }catch(Exception ex){
            System.out.println("Database incomplete 2");
        }
        
        try{
           if(!applicationData.getVoterArea().equals(setted_voter_area)){
               setVoterArea();
           } 
        }catch(Exception ex){
            System.out.println("Databas incomplete voter");
        } 
        pvo=inp_permanent_village_otr.getText();         //dummy
    }
    
    
    
    public void setPresentDistrict(){
        System.out.println("setPresentDistrict working "+setted_present_district+" "+
                applicationData.getPresentDistrict());
        
        try{
        AddressEntityManagerBean aem;
        aem = new AddressEntityManagerBean();
        List<District> districts = aem.getDistrictFindByDivisionId(Integer.parseInt(DIVISION_VALUE));
        
        int cnt = 0;
                int selectedIndx = 0;

                for (District dc : districts) {
                    ++cnt;
                    
                    if (dc.getId()!=null && dc.getId().equalsIgnoreCase(applicationData.getPresentDistrict())) {
                        selectedIndx = cnt;
                       System.out.println("Present Dist: "+applicationData.getPresentDistrict());
                    }
                    else
                    {
                        System.out.println("BaRaChara Obstha");
                    }
                }
                
                cmb_present_district.setSelectedIndex(selectedIndx);
                setted_present_district=(((Item) cmb_present_district.getItemAt(selectedIndx)).getValue().toString()); 
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    public void setPresentUpozila(){
        
        try{
            AddressEntityManagerBean aem;
            String value = null;
            try {
                value = (((Item) cmb_present_district.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (value != null && !value.isEmpty()) {

                //Upozila

                aem = new AddressEntityManagerBean();
                List<Upozila> upozilas = aem.getUpozilaFindByDistrictId(Integer.parseInt(value));
                DISTRICT_VALUE=value;

                cmb_present_upozila.removeAllItems();
                cmb_present_upozila.addItem(new Item<String>("", "Upozila"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Upozila uz : upozilas) {
                    ++cnt;
                    cmb_present_upozila.addItem(new Item<String>(uz.getId(), uz.getNameEn()));
                    if (uz.getId().equalsIgnoreCase(applicationData.getPresentUpozila())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_present_upozila.setSelectedIndex(selectedIndx);
                setted_present_upozila = (((Item) cmb_present_upozila.getItemAt(selectedIndx)).getValue().toString());
            }
          }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    public void setPresentPostOffice(){
        
            try{
            AddressEntityManagerBean aem;
            String value = null;
            try {
                value = (((Item) cmb_present_district.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (value != null && !value.isEmpty()) {
                
                aem = new AddressEntityManagerBean();
                List<Postoffice> postoffices = aem.getPostOfficeByDistrict(value);

                cmb_present_postoffice.removeAllItems();
                cmb_present_postoffice.addItem(new Item<String>("", "Post Office"));

                int pocnt = 0;
                int poselectedIndx = 0;

                for (Postoffice po : postoffices) {
                    ++pocnt;
                    cmb_present_postoffice.addItem(new Item<String>(po.getId().toString(), po.getSuboffice()));
                    if (po.getId().toString().equalsIgnoreCase(applicationData.getPresentPostOffice())) {
                        poselectedIndx = pocnt;
                    }
                }
                cmb_present_postoffice.setSelectedIndex(poselectedIndx);
                setted_present_postoffice = (((Item) cmb_present_postoffice.getItemAt(poselectedIndx)).getValue().toString());
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    public void setPresentRmo(){
        String upozila = null;
            try {
                upozila = (((Item) cmb_present_upozila.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (upozila != null && !upozila.isEmpty()) {

                cmb_present_rmo.removeAllItems();

                int selectedIndx = 0;
                int cnt = 0;
                for (Item it : RMO_LIST) {
                    cmb_present_rmo.addItem(it);
                    if (it.getValue().toString().equalsIgnoreCase(applicationData.getPresentRmo())) {
                        selectedIndx = cnt;
                    }
                    ++cnt;
                }

                cmb_present_rmo.setSelectedIndex(selectedIndx);
                setted_present_rmo=(((Item) cmb_present_rmo.getItemAt(selectedIndx)).getValue().toString());

            }
    }
    
    public void setPresentCity(){
        
            AddressEntityManagerBean aem;

            String rmo = null;
            String district = null;
            String upozila = null;

            try {

                district = (((Item) cmb_present_district.getSelectedItem()).getValue().toString());
                upozila = (((Item) cmb_present_upozila.getSelectedItem()).getValue().toString());
                rmo = (((Item) cmb_present_rmo.getSelectedItem()).getValue().toString());

            } catch (Exception ex) {
            }

            if ((district != null && !district.isEmpty())
                    && (upozila != null && !upozila.isEmpty())
                    && (rmo != null && !rmo.isEmpty())) {

                //RMO code 2 is pouroshova and RMO code 9 is city corporation
                if ((rmo.equalsIgnoreCase("2"))
                        || (rmo.equalsIgnoreCase("9"))
                        || (applicationData.getPresentRmo() != null && applicationData.getPresentRmo().equalsIgnoreCase("2"))
                        || (applicationData.getPresentRmo() != null && applicationData.getPresentRmo().equalsIgnoreCase("9"))) {

                    if (applicationData.getPresentDistrict() != null) {
                        district = applicationData.getPresentDistrict();
                    }

                    if (applicationData.getPresentUpozila() != null) {
                        upozila = applicationData.getPresentUpozila();
                    }

                    if (applicationData.getPresentRmo() != null) {
                        rmo = applicationData.getPresentRmo();
                    } 

                    aem = new AddressEntityManagerBean();
                    List<City> cities = aem.getCityFindByDistUpoAndRmo(district, upozila, rmo);

                    cmb_present_city.removeAllItems();
                    cmb_present_city.addItem(new Item<String>("", "City Corp."));

                    int cnt = 0;
                    int selectedIndx = 0;

                    for (City ct : cities) {
                        ++cnt;
                        cmb_present_city.addItem(new Item<String>(ct.getId().toString(), ct.getNameEn()));
                        if (ct.getId().toString().equalsIgnoreCase(applicationData.getPresentCity())) {
                            selectedIndx = cnt;
                        }
                    }
                    cmb_present_city.setSelectedIndex(selectedIndx);
                    setted_present_city=(((Item) cmb_present_city.getItemAt(selectedIndx)).getValue().toString());

                } else {
                    //Condition for RMO which are neither pouroshova nor city corp.
                    cmb_present_city.removeAllItems();
                    cmb_present_city.addItem(new Item<String>("", "City Corp."));
                    cmb_present_city.addItem(new Item<String>("0", "N/A"));
                    if (applicationData.getPresentCity() != null && applicationData.getPresentCity().equalsIgnoreCase("0")) {
                        cmb_present_city.setSelectedIndex(1);
                    }
                }
            } 
    }
    
    public void setPresentEunion(){
        
            AddressEntityManagerBean aem;

            String upozila = null;
            String city = null;

            try {

                upozila = (((Item) cmb_present_upozila.getSelectedItem()).getValue().toString());
                city = (((Item) cmb_present_city.getSelectedItem()).getValue().toString());

            } catch (Exception ex) {
            }

            if ((upozila != null && !upozila.isEmpty())
                    && (city != null && !city.isEmpty())) {

                aem = new AddressEntityManagerBean();
                List<Eunion> eunions = aem.getEunionByUpoAndCity(Integer.parseInt(upozila), Integer.parseInt(city));

                cmb_present_eunion.removeAllItems();
                cmb_present_eunion.addItem(new Item<String>("", "Eunion"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Eunion eu : eunions) {
                    ++cnt;
                    cmb_present_eunion.addItem(new Item<String>(eu.getId().toString(), eu.getNameEn()));
                    if (eu.getId().equalsIgnoreCase(applicationData.getPresentEunion())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_present_eunion.setSelectedIndex(selectedIndx);
                setted_present_eunion=(((Item) cmb_present_eunion.getItemAt(selectedIndx)).getValue().toString());

            }
            
    }
    
    public void setPresentMouza(){
        
        AddressEntityManagerBean aem;    
        String eunion = null;
            try {
                eunion = (((Item) cmb_present_eunion.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (eunion != null && !eunion.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<Area> areas = aem.getMouzaByEunion(Integer.parseInt(eunion));


                cmb_present_mouza.removeAllItems();
                cmb_present_mouza.addItem(new Item<String>("", "Mouza"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Area ar : areas) {
                    ++cnt;
                    cmb_present_mouza.addItem(new Item<String>(ar.getId(), ar.getNameEn()));
                    if (ar.getId().equalsIgnoreCase(applicationData.getPresentMouza())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_present_mouza.addItem(new Item<String>("999", "OTHER"));

                if (applicationData.getPresentMouza() != null && applicationData.getPresentMouza().equalsIgnoreCase("999")) {
                    selectedIndx = areas.size() + 1;
                }

                cmb_present_mouza.setSelectedIndex(selectedIndx);
                setted_present_mouza=(((Item) cmb_present_mouza.getItemAt(selectedIndx)).getValue().toString());

            }
        
    }
    
    public void setPresentVillage(){
                    AddressEntityManagerBean aem;
            String mouza = null;
            try {
                mouza = (((Item) cmb_present_mouza.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (mouza != null && !mouza.isEmpty()) {

                if (!mouza.equalsIgnoreCase("999")) {

                    //reset below as well when no item is selected
                    if (inp_present_mouza_otr.isEditable()) {
                        inp_present_mouza_otr.setEditable(false);
                        inp_present_mouza_otr.setText("");
                    }


                    aem = new AddressEntityManagerBean();
                    List<Village> villages = aem.getVillageByMouza(mouza);


                    cmb_present_village.removeAllItems();
                    cmb_present_village.addItem(new Item<String>("", "Village"));

                    int cnt = 0;
                    int selectedIndx = 0;

                    for (Village vl : villages) {
                        ++cnt;
                        cmb_present_village.addItem(new Item<String>(vl.getId(), vl.getNameEn()));
                        if (vl.getId().equalsIgnoreCase(applicationData.getPresentVillage())) {
                            selectedIndx = cnt;
                        }
                    }
                    cmb_present_village.addItem(new Item<String>("999", "OTHER"));

                    if (applicationData.getPresentVillage() != null && applicationData.getPresentVillage().equalsIgnoreCase("999")) {
                        selectedIndx = villages.size() + 1;
                    }

                    cmb_present_village.setSelectedIndex(selectedIndx);
                    setted_present_village=(((Item) cmb_present_village.getItemAt(selectedIndx)).getValue().toString());

                }
        }
    }
    
    public void setPermanentDistrict(){
            AddressEntityManagerBean aem;
            String value = null;
            try {
                value = (((Item) cmb_permanent_division.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (value != null && !value.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<District> districts = aem.getDistrictFindByDivisionId(Integer.parseInt(value));


                cmb_permanent_district.removeAllItems();
                cmb_permanent_district.addItem(new Item<String>("", "District"));

                int cnt = 0;
                int selectedIndx = 0;

                for (District dc : districts) {
                    ++cnt;
                    cmb_permanent_district.addItem(new Item<String>(dc.getId(), dc.getNameEn()));

                    if (dc.getId().equalsIgnoreCase(applicationData.getPermDistrict())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_permanent_district.setSelectedIndex(selectedIndx);
                setted_permanent_district=(((Item) cmb_permanent_district.getItemAt(selectedIndx)).getValue().toString());
          }
    }
    
    public void setPermanentUpozila(){
         AddressEntityManagerBean aem;
            String value = null;
            try {
                value = (((Item) cmb_permanent_district.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (value != null && !value.isEmpty()) {

                //Upozila

                aem = new AddressEntityManagerBean();
                List<Upozila> upozilas = aem.getUpozilaFindByDistrictId(Integer.parseInt(value));

                cmb_permanent_upozila.removeAllItems();
                cmb_permanent_upozila.addItem(new Item<String>("", "Upozila"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Upozila uz : upozilas) {
                    cmb_permanent_upozila.addItem(new Item<String>(uz.getId(), uz.getNameEn()));
                    ++cnt;
                    if (uz.getId().equalsIgnoreCase(applicationData.getPermUpozila())) {
                        selectedIndx = cnt;
                    }

                }
                cmb_permanent_upozila.setSelectedIndex(selectedIndx);
                setted_permanent_upozila=(((Item) cmb_permanent_upozila.getItemAt(selectedIndx)).getValue().toString());
            }
    }   
    
    public void setPermanentPostOffice(){
                
                AddressEntityManagerBean aem;
                aem = new AddressEntityManagerBean();
                String value = null;
                try {
                value = (((Item) cmb_permanent_district.getSelectedItem()).getValue().toString());
                } catch (Exception ex) {
                }
                List<Postoffice> postoffices = aem.getPostOfficeByDistrict(value);

                cmb_permanent_postoffice.removeAllItems();
                cmb_permanent_postoffice.addItem(new Item<String>("", "Post Office"));

                int pocnt = 0;
                int poselectedIndx = 0;

                for (Postoffice po : postoffices) {
                    ++pocnt;
                    cmb_permanent_postoffice.addItem(new Item<String>(po.getId().toString(), po.getSuboffice()));
                    if (po.getId().toString().equalsIgnoreCase(applicationData.getPermanentPostOffice())) {
                        poselectedIndx = pocnt;
                    }
                }
                cmb_permanent_postoffice.setSelectedIndex(poselectedIndx);
                setted_permanent_postoffice=(((Item) cmb_permanent_postoffice.getItemAt(poselectedIndx)).getValue().toString());
        
    }
    
    public void setPermanentRmo(){
        
            String upozila = null;
            try {
                upozila = (((Item) cmb_permanent_upozila.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (upozila != null && !upozila.isEmpty()) {

                cmb_permanent_rmo.removeAllItems();

                int selectedIndx = 0;
                int cnt = 0;
                for (Item it : RMO_LIST) {

                    cmb_permanent_rmo.addItem(it);
                    if (it.getValue().toString().equalsIgnoreCase(applicationData.getPermanentRmo())) {
                        selectedIndx = cnt;
                    }
                    ++cnt;

                }

                cmb_permanent_rmo.setSelectedIndex(selectedIndx);
                setted_permanent_rmo=(((Item) cmb_permanent_rmo.getItemAt(selectedIndx)).getValue().toString());
            }
        
    }
    
    public void setPermanentCity(){

            AddressEntityManagerBean aem;

            String rmo = null;
            String district = null;
            String upozila = null;

            try {

                district = (((Item) cmb_permanent_district.getSelectedItem()).getValue().toString());
                upozila = (((Item) cmb_permanent_upozila.getSelectedItem()).getValue().toString());
                rmo = (((Item) cmb_permanent_rmo.getSelectedItem()).getValue().toString());

            } catch (Exception ex) {
            }

            if ((district != null && !district.isEmpty())
                    && (upozila != null && !upozila.isEmpty())
                    && (rmo != null && !rmo.isEmpty())) {

                //RMO code 2 is pouroshova and RMO code 9 is city corporation
                if ((rmo.equalsIgnoreCase("2"))
                        || (rmo.equalsIgnoreCase("9"))
                        || (applicationData.getPermanentRmo() != null && applicationData.getPermanentRmo().equalsIgnoreCase("2"))
                        || (applicationData.getPermanentRmo() != null && applicationData.getPermanentRmo().equalsIgnoreCase("9"))) {

                    if (applicationData.getPermDistrict() != null) {
                        district = applicationData.getPermDistrict();
                    }

                    if (applicationData.getPermUpozila() != null) {
                        upozila = applicationData.getPresentUpozila();
                    }

                    if (applicationData.getPermanentRmo() != null) {
                        rmo = applicationData.getPermanentRmo();
                    } 

                    aem = new AddressEntityManagerBean();
                    List<City> cities = aem.getCityFindByDistUpoAndRmo(district, upozila, rmo);

                    cmb_permanent_city.removeAllItems();
                    cmb_permanent_city.addItem(new Item<String>("", "City Corp."));

                    int selectedIndx = 0;
                    int cnt = 0;

                    for (City ct : cities) {
                        ++cnt;
                        cmb_permanent_city.addItem(new Item<String>(ct.getId().toString(), ct.getNameEn()));
                        if (ct.getId().toString().equalsIgnoreCase(applicationData.getPermanentCity())) {
                            selectedIndx = cnt;
                        }
                    }
                    cmb_permanent_city.setSelectedIndex(selectedIndx);
                    setted_permanent_city=(((Item) cmb_permanent_city.getItemAt(selectedIndx)).getValue().toString());

                } else {
                    //Condition for RMO which are neither pouroshova nor city corp.
                    cmb_permanent_city.removeAllItems();
                    cmb_permanent_city.addItem(new Item<String>("", "City Corp."));
                    cmb_permanent_city.addItem(new Item<String>("0", "N/A"));

                    if (applicationData.getPermanentCity() != null && applicationData.getPermanentCity().equalsIgnoreCase("0")) {
                        cmb_permanent_city.setSelectedIndex(1);
                    }
                 }
        
               }
    }
    
    public void setPermanentEunion(){
        
            AddressEntityManagerBean aem;

            String upozila = null;
            String city = null;

            try {

                upozila = (((Item) cmb_permanent_upozila.getSelectedItem()).getValue().toString());
                city = (((Item) cmb_permanent_city.getSelectedItem()).getValue().toString());

            } catch (Exception ex) {
            }

            if ((upozila != null && !upozila.isEmpty())
                    && (city != null && !city.isEmpty())) {

                aem = new AddressEntityManagerBean();
                List<Eunion> eunions = aem.getEunionByUpoAndCity(Integer.parseInt(upozila), Integer.parseInt(city));

                cmb_permanent_eunion.removeAllItems();
                cmb_permanent_eunion.addItem(new Item<String>("", "Eunion"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Eunion eu : eunions) {
                    ++cnt;
                    cmb_permanent_eunion.addItem(new Item<String>(eu.getId().toString(), eu.getNameEn()));
                    if (eu.getId().equalsIgnoreCase(applicationData.getPermanentEunion())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_permanent_eunion.setSelectedIndex(selectedIndx);
                setted_permanent_eunion=(((Item) cmb_permanent_eunion.getItemAt(selectedIndx)).getValue().toString());
            }
    }          
    
    public void setPermanentMouza(){
        
            AddressEntityManagerBean aem;
            String eunion = null;
            try {
              eunion = (((Item) cmb_permanent_eunion.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (eunion != null && !eunion.isEmpty()) {
                aem = new AddressEntityManagerBean();
                List<Area> areas = aem.getMouzaByEunion(Integer.parseInt(eunion));

                cmb_permanent_mouza.removeAllItems();
                cmb_permanent_mouza.addItem(new Item<String>("", "Mouza"));

                int cnt = 0;
                int selectedIndx = 0;

                for (Area ar : areas) {
                    ++cnt;
                    cmb_permanent_mouza.addItem(new Item<String>(ar.getId(), ar.getNameEn()));
                    if (ar.getId().equalsIgnoreCase(applicationData.getPermanentMouza())) {
                        selectedIndx = cnt;
                    }
                }
                cmb_permanent_mouza.addItem(new Item<String>("999", "OTHER"));

                if (applicationData.getPermanentMouza() != null && applicationData.getPermanentMouza().equalsIgnoreCase("999")) {
                    selectedIndx = areas.size() + 1;
                }

                cmb_permanent_mouza.setSelectedIndex(selectedIndx);
                setted_permanent_mouza=(((Item) cmb_permanent_mouza.getItemAt(selectedIndx)).getValue().toString());
        
            }
    }
    
    public void setPermanentVillage(){
        
                    AddressEntityManagerBean aem;
            String mouza = null;
            try {
                mouza = (((Item) cmb_permanent_mouza.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }
            if (mouza != null && !mouza.isEmpty()) {

                if (!mouza.equalsIgnoreCase("999")) {

                    //reset below as well when no item is selected
                    if (inp_permanent_mouza_otr.isEditable()) {
                        inp_permanent_mouza_otr.setEditable(false);
                        inp_permanent_mouza_otr.setText("");
                    }


                    aem = new AddressEntityManagerBean();
                    List<Village> villages = aem.getVillageByMouza(mouza);


                    cmb_permanent_village.removeAllItems();
                    cmb_permanent_village.addItem(new Item<String>("", "Village"));

                    int cnt = 0;
                    int selectedIndx = 0;

                    for (Village vl : villages) {
                        ++cnt;
                        cmb_permanent_village.addItem(new Item<String>(vl.getId(), vl.getNameEn()));
                        if (vl.getId().equalsIgnoreCase(applicationData.getPermanentVillage())) {
                            selectedIndx = cnt;
                        }
                    }
                    cmb_permanent_village.addItem(new Item<String>("999", "OTHER"));

                    if (applicationData.getPermanentVillage() != null && applicationData.getPermanentVillage().equalsIgnoreCase("999")) {
                        selectedIndx = villages.size() + 1;
                    }

                    cmb_permanent_village.setSelectedIndex(selectedIndx);
                    setted_permanent_village=(((Item) cmb_permanent_village.getItemAt(selectedIndx)).getValue().toString());

                } else {

                    inp_permanent_mouza_otr.setEditable(true);

                    cmb_permanent_village.removeAllItems();
                    cmb_permanent_village.addItem(new Item<String>("", "Village"));
                    cmb_permanent_village.addItem(new Item<String>("999", "OTHER"));

                  }
        
                }
    }
    
    public void setVoterArea(){
            String value = null;
            try {
                value = (((Item) cmb_voter_at.getSelectedItem()).getValue().toString());
            } catch (Exception ex) {
            }

            if (value != null && value.length() > 0) {

                String present_eunion_val = null;
                try {

                    if (applicationData.getPresentEunion() != null && applicationData.getPresentEunion().length() > 0) {
                        present_eunion_val = applicationData.getPresentEunion();
                    } else {
                        present_eunion_val = (((Item) cmb_present_eunion.getSelectedItem()).getValue().toString());
                    }
                } catch (Exception ex) {
                }

                String permanent_eunion_val = null;
                try {

                    if (applicationData.getPermanentEunion() != null && applicationData.getPermanentEunion().length() > 0) {
                        permanent_eunion_val = applicationData.getPermanentEunion();
                    } else {

                        permanent_eunion_val = (((Item) cmb_permanent_eunion.getSelectedItem()).getValue().toString());

                    }
                } catch (Exception ex) {
                }

                if (((present_eunion_val != null && present_eunion_val.length() > 0) && (permanent_eunion_val != null && permanent_eunion_val.length() > 0))) {

                    cmb_voter_area.setEnabled(true);
                    cmb_voter_area.setFont(new java.awt.Font("Kalpurush", 0, 11));

                    //fetch voter area based on selection
                    AddressEntityManagerBean aem;
                    String eunion_id = null;

                    if (value.equalsIgnoreCase("PRESENT")) {
                        eunion_id = present_eunion_val;
                    } else {
                        eunion_id = permanent_eunion_val;
                    }

                    if (eunion_id != null && eunion_id.length() > 0) {

                        aem = new AddressEntityManagerBean();
                        List<VoterArea> voterAreas = aem.getVoterAreaByEunion(eunion_id);

                        cmb_voter_area.removeAllItems();
                        cmb_voter_area.addItem(new Item<String>("", "Voter Area"));

                        int cnt = 0;
                        int selectedIndx = 0;

                        for (VoterArea va : voterAreas) {
                            ++cnt;
                            cmb_voter_area.addItem(new Item<String>(va.getId().toString(), va.getName()));
                            if (va.getId().equalsIgnoreCase(applicationData.getVoterArea())) {
                                selectedIndx = cnt;
                            }
                        }
                        cmb_voter_area.setSelectedIndex(selectedIndx);
                        setted_voter_area=(((Item) cmb_voter_area.getSelectedItem()).getValue().toString());

                    }

                }
            }
    }
    
    

    public static void setSelectedValueDivision(JComboBox comboBox, String value) {
        String desc = "";
        for (Division dv : Lookup.DIVISION_LIST) {
            if (dv.getId().equalsIgnoreCase(value)) {
                desc = dv.getNameEn();
                break;
            }
        }

        if (desc == "") {
            return;
        }

        for (int i = 0; i < comboBox.getItemCount(); i++) {
            String val = (String) comboBox.getItemAt(i).toString();
            if (val.equalsIgnoreCase(desc)) {
                comboBox.setSelectedIndex(i);
                break;
            }
        }
    }

    public static void setSelectedValueDistrict(JComboBox comboBox, String value) {
        String desc = "";
        for (District dt : Lookup.DISTRICT_LIST) {
            if (dt.getId().equalsIgnoreCase(value)) {
                desc = dt.getNameEn();
                break;
            }
        }

        if (desc == "") {
            return;
        }

        for (int i = 0; i < comboBox.getItemCount(); i++) {
            String val = (String) comboBox.getItemAt(i).toString();
            if (val.equalsIgnoreCase(desc)) {
                comboBox.setSelectedIndex(i);
                break;
            }
        }
    }
    
    //new code for Upozilla    
    public static void setSelectedValueUpozilla(JComboBox comboBox, String value) {
        String desc = "";
        for (Upozila dt : Lookup.UPOZILA_LIST) {
            if (dt.getId().equalsIgnoreCase(value)) {
                desc = dt.getNameEn();
                break;
            }
        }

        if (desc == "") {
            return;
        }

        for (int i = 0; i < comboBox.getItemCount(); i++) {
            String val = (String) comboBox.getItemAt(i).toString();
            if (val.equalsIgnoreCase(desc)) {
                comboBox.setSelectedIndex(i);
                break;
            }
        }
    }

    public static void setSelectedValueLookup(JComboBox comboBox, String value, List<Item> lookupItemList) {
        String desc = "";

        for (Item it : lookupItemList) {
            if (it.getValue().toString().equalsIgnoreCase(value)) {
                desc = it.getDescription();
                break;
            }
        }

        if (desc == "") {
            return;
        }

        for (int i = 0; i < comboBox.getItemCount(); i++) {
            String val = (String) comboBox.getItemAt(i).toString();
            if (val.equalsIgnoreCase(desc)) {
                comboBox.setSelectedIndex(i);
                break;
            }
        }
    }

    public static void showWsqImageinJLabel(JLabel jlbl, byte[] wsq) {
        if (wsq == null) {
            System.out.println("wsq is nullllllllllllllllllll");
            jlbl.setIcon(null);
            return;
        }

        try {
            WsqDecoder deco = new WsqDecoder();
            Bitmap bitmap = deco.decode(wsq);
            BufferedImage bim = convert(bitmap);
            jlbl.setIcon(new ImageIcon(bim.getScaledInstance(jlbl.getWidth(), jlbl.getHeight(), java.awt.Image.SCALE_DEFAULT)));

        } catch (Exception ex) {
            System.out.println("error occurred while converting wsq to image");
            ex.printStackTrace();

        }

    }

    private static BufferedImage convert(Bitmap bitmap) {
        int width = bitmap.getWidth();
        int height = bitmap.getHeight();
        byte[] data = bitmap.getPixels();
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);
        WritableRaster raster = image.getRaster();
        raster.setDataElements(0, 0, width, height, data);
        return image;
    }

    public void resetEnrollmentApplication() {
        
        ApplicationNidPanel.applicationData=new ApplicationData();

        setDefaultTextField(inp_name_bangla, true);
        setDefaultTextField(inp_name_english, true);
        setDefaultTextField(inp_name_father, true);
        setDefaultTextField(inp_father_nid, true);
        setDefaultTextField(inp_name_mother, true);
        setDefaultTextField(inp_mother_nid, true);
        setDefaultTextField(inp_name_spouse, true);
        setDefaultTextField(inp_spouse_nid, true);
        setDefaultTextField(inp_nid, true);
        setDefaultTextField(inp_nid_old, true);
        setDefaultTextField(inp_nationality, true);
        setDefaultTextField(inp_birth_registration_no, true);
        setDefaultTextField(inp_uim, true);

        setDefaultTextField(inp_present_mouza_otr, true);
        setDefaultTextField(inp_permanent_mouza_otr, true);
        setDefaultTextField(inp_present_house, true);
        setDefaultTextField(inp_present_village_otr, true);
        setDefaultTextField(inp_permanent_village_otr, true);
        setDefaultTextField(inp_permanent_house, true);

        setDefaultTextField(inp_telephone, true);
        setDefaultTextField(inp_mobile, true);
        setDefaultTextField(inp_email, true);

        setDefaultTextField(inp_passport, true);
        setDefaultTextField(inp_drv_license, true);
        setDefaultTextField(inp_tin_no, true);

        setDefaultTextField(inp_remark_fp, true);

        setDefaultTextField(inp_present_postcode, true);
        setDefaultTextField(inp_permanent_postcode, true);

        txt_handicap_remarks.setText("");

        setDefaultComboBox(cmb_marital_status, true);
        setDefaultComboBox(cmb_birth_place_district, true);
        setDefaultComboBox(cmb_blood_grp, true);
        setDefaultComboBox(cmb_present_division, true);
        setDefaultComboBox(cmb_present_district, true);
        setDefaultComboBox(cmb_present_upozila, true);
        setDefaultComboBox(cmb_present_rmo, true);
        setDefaultComboBox(cmb_present_city, true);
        setDefaultComboBox(cmb_present_eunion, true);
        setDefaultComboBox(cmb_present_mouza, true);
        setDefaultComboBox(cmb_present_village, true);
        setDefaultComboBox(cmb_present_postoffice, true);
        setDefaultComboBox(cmb_permanent_division, true);
        setDefaultComboBox(cmb_permanent_district, true);
        setDefaultComboBox(cmb_permanent_upozila, true);
        setDefaultComboBox(cmb_permanent_rmo, true);
        setDefaultComboBox(cmb_permanent_city, true);
        setDefaultComboBox(cmb_permanent_eunion, true);
        setDefaultComboBox(cmb_permanent_mouza, true);
        setDefaultComboBox(cmb_permanent_village, true);
        setDefaultComboBox(cmb_permanent_postoffice, true);
        setDefaultComboBox(cmb_voter_at, true);
        setDefaultComboBox(cmb_education, true);
        setDefaultComboBox(cmb_profession, true);
        setDefaultComboBox(cmb_religion, true);
        setDefaultComboBox(cmb_voter_area, true);

        genderButtonGroup.clearSelection();
        rdo_gender_male.setBorderPainted(false);
        rdo_gender_male.setBorder(null);
        rdo_gender_female.setBorderPainted(true);
        rdo_gender_female.setBorder(null);
        rdo_gender_third.setBorderPainted(true);
        rdo_gender_third.setBorder(null);

        setDefaultCalField(cal_date_of_birth, true);
        setDefaultCalField(cal_nid_issue_date, true);

        chk_fp_not_ten_fingers.setSelected(false);
        chk_handicap_amputant.setSelected(false);
        chk_handicap_deaf.setSelected(false);
        chk_handicap_mute.setSelected(false);
        chk_handicap_others.setSelected(false);
        chk_handicap_speech.setSelected(false);
        chk_handicap_visual.setSelected(false);
        chk_sd_citizenship.setSelected(false);
        chk_sd_marriage.setSelected(false);
        chk_sd_other.setSelected(false);
        chk_sd_transfer.setSelected(false);
        chk_sd_utility.setSelected(false);

        lbl_fp_lt.setIcon(null);
        lbl_fp_li.setIcon(null);
        lbl_fp_lm.setIcon(null);
        lbl_fp_lr.setIcon(null);
        lbl_fp_lp.setIcon(null);
        lbl_fp_rt.setIcon(null);
        lbl_fp_ri.setIcon(null);
        lbl_fp_rm.setIcon(null);
        lbl_fp_rr.setIcon(null);
        lbl_fp_rp.setIcon(null);
        lbl_left_eye.setIcon(null);
        lbl_left_eye.setText("LEFT EYE");
        lbl_right_eye.setIcon(null);
        lbl_right_eye.setText("RIGHT EYE");
        lbl_signature.setIcon(null);
        lbl_signature.setText("SIGNATURE");
        lbl_photo.setIcon(null);
        lbl_photo.setText("PHOTO");
    }

    public void viewCardData(HashMap<String, String> data) {
        CardLayout card1 = (CardLayout) imagePanel1.getLayout();
        card1.show(imagePanel1, "app");

//    applicationMenu.setBackground(new Color(51,153,255));

        /*ContainerJFrame.applicationMenu.setBackground(new Color(204, 204, 204));
         ContainerJFrame.applicationMenu.setBorder(javax.swing.BorderFactory.createLineBorder(Color.DARK_GRAY, 1, false));
         ContainerJFrame.applicationMenu.setBorderPainted(true);
         ContainerJFrame.applicationMenu.setOpaque(true);
         ContainerJFrame.applicationMenu.setSelected(true);
         ContainerJFrame.registrationMenu.setBackground(new Color(240, 240, 240));
         ContainerJFrame.registrationMenu.setOpaque(false);
         ContainerJFrame.registrationMenu.setSelected(false);
         ContainerJFrame.registrationMenu.setBorderPainted(false);
         ContainerJFrame.dashboardMenu.setBackground(new Color(240, 240, 240));
         ContainerJFrame.dashboardMenu.setOpaque(false);
         ContainerJFrame.dashboardMenu.setSelected(false);
         ContainerJFrame.dashboardMenu.setBorderPainted(false);
         ContainerJFrame.nidRegisterMenu.setBackground(new Color(240, 240, 240));
         ContainerJFrame.nidRegisterMenu.setOpaque(false);
         ContainerJFrame.nidRegisterMenu.setSelected(false);
         ContainerJFrame.nidRegisterMenu.setBorderPainted(false);*/

        applicationData = new ApplicationData();

        if (data != null) {

            initializeFontForFields();

            if (smart_card_photo != null) {
                applicationData.setPhoto(smart_card_photo);
                smart_card_photo = null;
            }

            //modifications to the form design is required
            String voter_at = "";
            String voter_address = "";
            String other_address = "";

            for (String key : data.keySet()) {

                if (key.equalsIgnoreCase(Defs.SC_NAME_ENG)) {
                    inp_name_english.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_NAME_BNG)) {
                    inp_name_bangla.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_NAME_FATHER)) {
                    inp_name_father.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_NAME_MOTHER)) {
                    inp_name_mother.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_DOB)) {
                    Date dob = formatSmartCardDateStr(data.get(key));
                    if (dob != null) {
                        ApplicationNidPanel.cal_date_of_birth.setDate(dob);
                    }
                } else if (key.equalsIgnoreCase(Defs.SC_VOTER_ADDRESS)) {
                    voter_address = data.get(key);
                } else if (key.equalsIgnoreCase(Defs.SC_ISSUE_DATE)) {
                    Date issue_date = formatSmartCardDateStr(data.get(key));
                    if (issue_date != null) {
                        ApplicationNidPanel.cal_nid_issue_date.setDate(issue_date);
                    }
                } else if (key.equalsIgnoreCase(Defs.SC_NID_OLD)) {
                    ApplicationNidPanel.inp_nid_old.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_NID_NEW)) {
                    ApplicationNidPanel.inp_nid.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_NATIONALITY)) {
                    ApplicationNidPanel.inp_nationality.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_BIRTH_PLACE)) {
                    setBirthPlaceDistrict(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_BLOOD_GRP)) {
                    setBloodGroup(data.get(key));

                } else if (key.equalsIgnoreCase(Defs.SC_GENDER)) {
                    String gender = data.get(key);
                    if (gender != null && gender.length() > 0) {
                        if (gender.equalsIgnoreCase("male") || gender.equalsIgnoreCase("m")) {
                            rdo_gender_male.setSelected(true);
                        } else if (gender.equalsIgnoreCase("female") || gender.equalsIgnoreCase("f")) {
                            rdo_gender_female.setSelected(true);
                        } else {
                            rdo_gender_third.setSelected(true);
                        }
                    }

                } else if (key.equalsIgnoreCase(Defs.SC_VOTER_AT)) {
                    voter_at = data.get(key);

                    if (voter_at != null && voter_at.length() > 0) {

                        for (int i = 0; i < ApplicationNidPanel.cmb_voter_at.getItemCount(); i++) {
                            String val = (String) ApplicationNidPanel.cmb_voter_at.getItemAt(i).toString();
                            if (voter_at.equalsIgnoreCase("PR") && val.equalsIgnoreCase("PRESENT")) {
                                ApplicationNidPanel.cmb_voter_at.setSelectedIndex(i);
                                break;
                            }
                        }
                    }

                } else if (key.equalsIgnoreCase(Defs.SC_OTHER_ADDRESS)) {
                    other_address = data.get(key);
                } else if (key.equalsIgnoreCase(Defs.SC_UIM)) {
                    ApplicationNidPanel.inp_uim.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_EDUCATION)) {
                    //processing required
                } else if (key.equalsIgnoreCase(Defs.SC_PROFESSION)) {
                    //processing required
                } else if (key.equalsIgnoreCase(Defs.SC_RELIGION)) {
                    //processing required
                } else if (key.equalsIgnoreCase(Defs.SC_DISABILITY)) {
                    //processing required
                } else if (key.equalsIgnoreCase(Defs.SC_FATHER_NID)) {
                    inp_father_nid.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_MOTHER_NID)) {
                    inp_mother_nid.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_SPOUSE_NID)) {
                    inp_spouse_nid.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_NAME_SPOUSE)) {
                    inp_name_spouse.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_PASSPORT)) {
                    ApplicationNidPanel.inp_drv_license.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_TIN)) {
                    ApplicationNidPanel.inp_tin_no.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_DRIVING_LICENSE)) {
                    ApplicationNidPanel.inp_passport.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_TELEPHONE)) {
                    ApplicationNidPanel.inp_telephone.setText(data.get(key));
                } else if (key.equalsIgnoreCase(Defs.SC_MOBILE)) {
                    ApplicationNidPanel.inp_mobile.setText(data.get(key));
                }

            }

            processSmartCardAddress(voter_address, voter_at);
            processSmartCardAddress(other_address, "other");

        } else {

            JOptionPane.showMessageDialog(null, "No data found for loading", "Card Read Error", JOptionPane.ERROR_MESSAGE);

        }


    }

//***************************** Smart Card Utils **************************************************
    private void initializeFontForFields() {
        try {

            String font_path = "/com/perp/fonts/Bangla_arial.ttf";

            banglaFont = Font.createFont(Font.TRUETYPE_FONT, new File(ApplicationNidPanel.class.getResource(font_path).toURI())).deriveFont(15f);

            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(Font.createFont(Font.TRUETYPE_FONT, new File(ApplicationNidPanel.class.getResource(font_path).toURI())));

            inp_name_bangla.setFont(new java.awt.Font("Kalpurush", 0, 11));;
            inp_name_father.setFont(new java.awt.Font("Kalpurush", 0, 11));;
            inp_name_mother.setFont(new java.awt.Font("Kalpurush", 0, 11));;
            inp_name_spouse.setFont(new java.awt.Font("Kalpurush", 0, 11));;
            inp_present_mouza_otr.setFont(new java.awt.Font("Kalpurush", 0, 11));;
            inp_permanent_mouza_otr.setFont(new java.awt.Font("Kalpurush", 0, 11));
            cmb_voter_area.setFont(new java.awt.Font("Kalpurush", 0, 11));

        } catch (Exception ex) {
        }

    }

    private static Date formatSmartCardDateStr(String dateValue) {

        try {

            if (dateValue != null && dateValue.length() == 8) {

                String day = dateValue.substring(0, 2);
                String month = dateValue.substring(2, 4);
                String year = dateValue.substring(4, 8);

                String formatted_date = day + "/" + month + "/" + year;

                Date date = new SimpleDateFormat("dd/MM/yyyy").parse(formatted_date);
                return date;
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return null;

    }

    private static void processSmartCardAddress(String address, String voter_at) {

        if (address != null && address.length() > 0) {

            String add_arr[] = address.split(",");

            String upozila = "";
            String district = "";
            String other = "";

            for (int i = 0; i < add_arr.length; i++) {

                if (i < 3 || i == 4) {
                    if (other.length() > 0) {
                        other += ", ";
                    }
                    other += add_arr[i];
                }

                upozila = add_arr[3];
                district = add_arr[add_arr.length - 1];
            }

            //find district 
            if (district != null && district.length() > 0) {

                try {

                    DistrictJpaController dc = new DistrictJpaController();

                    database.entity.District districtEO = (database.entity.District) dc.getEntityManager()
                            .createNamedQuery("District.findByName")
                            .setParameter("name", district.trim())
                            .getSingleResult();

                    if (districtEO.getDivision() != null) {

                        AddressEntityManagerBean aem = new AddressEntityManagerBean();
                        List<Upozila> upozilas_list = aem.getUpozilaFindByDistrictId(Integer.parseInt(districtEO.getId()));

                        String selected_upozila_id = "";
                        if (upozila != null && upozila.length() > 0 && upozilas_list.size() > 0) {

                            for (Upozila upz : upozilas_list) {

                                if (upz.getName().trim().equalsIgnoreCase(upozila.trim())) {
                                    selected_upozila_id = upz.getId();
                                    break;

                                }
                            }
                        }

                        if (voter_at != null && "PR".equalsIgnoreCase(voter_at.trim())) {

                            applicationData.setPresentDistrict(districtEO.getId().toString());
                            applicationData.setPresentUpozila(selected_upozila_id);
                            setSelectedValueDivision(cmb_present_division, districtEO.getDivision().toString());
                            inp_present_mouza_otr.setText(other);

                        } else {

                            applicationData.setPermDistrict(districtEO.getId().toString());
                            applicationData.setPermUpozila(selected_upozila_id);
                            setSelectedValueDivision(cmb_permanent_division, districtEO.getDivision().toString());
                            inp_permanent_mouza_otr.setText(other);

                        }

                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }

    }

    private static void setBirthPlaceDistrict(String district) {

        try {

            if (district != null && district.length() > 0) {

                DistrictJpaController dc = new DistrictJpaController();

                database.entity.District districtEO = (database.entity.District) dc.getEntityManager()
                        .createNamedQuery("District.findByNameEn")
                        .setParameter("nameEn", district.trim())
                        .getSingleResult();

                if (districtEO.getId() != null) {

                    String desc = "";
                    for (District ds : Lookup.DISTRICT_LIST) {
                        if (ds.getId().equalsIgnoreCase(districtEO.getId())) {
                            desc = ds.getNameEn();
                            break;
                        }
                    }

                    if (desc == "") {
                        return;
                    }

                    for (int i = 0; i < cmb_birth_place_district.getItemCount(); i++) {
                        String val = (String) cmb_birth_place_district.getItemAt(i).toString();
                        if (val.equalsIgnoreCase(desc)) {
                            cmb_birth_place_district.setSelectedIndex(i);
                            break;
                        }
                    }

                }

            }

        } catch (Exception e) {
        }

    }

    private static void setBloodGroup(String bldGrp) {

        try {

            if (bldGrp != null && bldGrp.length() > 0) {

                for (int i = 0; i < cmb_blood_grp.getItemCount(); i++) {
                    String val = (String) cmb_blood_grp.getItemAt(i).toString();
                    if (val.equalsIgnoreCase(bldGrp)) {
                        cmb_blood_grp.setSelectedIndex(i);
                        break;
                    }
                }

            }

        } catch (Exception e) {
        }

    }
//***************************** Smart Card Utils **************************************************

    private void callGreenBitFingerPrint() {
        com.rizwan.greenbit.FingerPrintForm fpView = new com.rizwan.greenbit.FingerPrintForm();
        fpView.setTitle("Green Bit");
        fpView.setLocationRelativeTo(null);
        fpView.setVisible(true);
    }

    @Override
    public void prepareApplicationData() throws Exception {

        //applicationData = new ApplicationData();

        //PERSONAL DETAILS

        applicationData.setNameBn(inp_name_bangla.getText());
        applicationData.setNameEn(inp_name_english.getText());

        String gen;
        if (rdo_gender_third.isSelected()) {
            gen = Lookup.THIRD_GENDER;
        } else if (rdo_gender_female.isSelected()) {
            gen = Lookup.FEMALE;
        } else if (rdo_gender_male.isSelected()) {
            gen = Lookup.MALE;
        } else {
            gen = "";
        }
        applicationData.setGender(gen);

        applicationData.setFatherName(inp_name_father.getText());
        applicationData.setFatherNid(inp_father_nid.getText());

        applicationData.setMotherName(inp_name_mother.getText());
        applicationData.setMotherNid(inp_mother_nid.getText());

        applicationData.setSpouseName(inp_name_spouse.getText());
        applicationData.setSpouseNid(inp_spouse_nid.getText());
        applicationData.setMaritalStatus(((Item) cmb_marital_status.getSelectedItem()).getValue().toString());

        //CITIZENSHIP DETAILS

        applicationData.setNidNumber(inp_nid.getText());
        String nidIssueDate = cal_nid_issue_date.getDate() != null ? Defs.SDF.format(cal_nid_issue_date.getDate()) : "";
        applicationData.setNidIssueDate(nidIssueDate);
        applicationData.setPinNo(inp_nid_old.getText());

        applicationData.setBirthDistrict(((Item) cmb_birth_place_district.getSelectedItem()).getValue().toString());
        String dob = cal_nid_issue_date.getDate() != null ? Defs.SDF.format(cal_date_of_birth.getDate()) : "";
        applicationData.setDateOfBirth(dob);
        applicationData.setNationality(inp_nationality.getText());

        applicationData.setBirthRegistrationNumber(inp_birth_registration_no.getText());
        applicationData.setBloodGroup(((Item) cmb_blood_grp.getSelectedItem()).getValue().toString());

        applicationData.setUniqueIdentificationMark(inp_uim.getText());

        //ADDRESS

        // -- PRESENT ADDRESS

        applicationData.setPresentDivision(((Item) cmb_present_division.getSelectedItem()).getValue().toString());
        applicationData.setPresentDistrict(((Item) cmb_present_district.getSelectedItem()).getValue().toString());
        applicationData.setPresentUpozila(((Item) cmb_present_upozila.getSelectedItem()).getValue().toString());
        applicationData.setPresentRmo(((Item) cmb_present_rmo.getSelectedItem()).getValue().toString());

        applicationData.setPresentCity(((Item) cmb_present_city.getSelectedItem()).getValue().toString());
        applicationData.setPresentEunion(((Item) cmb_present_eunion.getSelectedItem()).getValue().toString());
        applicationData.setPresentPostOffice(((Item) cmb_present_postoffice.getSelectedItem()).getValue().toString());
        applicationData.setPresentPostCode(inp_present_postcode.getText());

        applicationData.setPresentMouza(((Item) cmb_present_mouza.getSelectedItem()).getValue().toString());
        applicationData.setPresentMouzaOtr(inp_present_mouza_otr.getText());
        applicationData.setPresentVillage(((Item) cmb_present_village.getSelectedItem()).getValue().toString());
        applicationData.setPresentVillageOtr(inp_present_village_otr.getText());

        applicationData.setPresentHouseNo(inp_present_house.getText());

        // -- PERMANENT ADDRESS

        applicationData.setPermDivision(((Item) cmb_permanent_division.getSelectedItem()).getValue().toString());
        applicationData.setPermDistrict(((Item) cmb_permanent_district.getSelectedItem()).getValue().toString());
        applicationData.setPermUpozila(((Item) cmb_permanent_upozila.getSelectedItem()).getValue().toString());
        applicationData.setPermanentRmo(((Item) cmb_permanent_rmo.getSelectedItem()).getValue().toString());

        applicationData.setPermanentCity(((Item) cmb_permanent_city.getSelectedItem()).getValue().toString());
        applicationData.setPermanentEunion(((Item) cmb_permanent_eunion.getSelectedItem()).getValue().toString());
        applicationData.setPermanentPostOffice(((Item) cmb_permanent_postoffice.getSelectedItem()).getValue().toString());
        applicationData.setPermanentPostCode(inp_permanent_postcode.getText());

        applicationData.setPermanentMouza(((Item) cmb_permanent_mouza.getSelectedItem()).getValue().toString());
        applicationData.setPermanentMouzaOtr(inp_permanent_mouza_otr.getText());
        applicationData.setPermanentVillage(((Item) cmb_permanent_village.getSelectedItem()).getValue().toString());
        applicationData.setPermanentVillageOtr(inp_permanent_village_otr.getText());

        applicationData.setPermanentHouseNo(inp_permanent_house.getText());

        // -- VOTER AREA

        applicationData.setVoterAt(((Item) cmb_voter_at.getSelectedItem()).getValue().toString());
        applicationData.setVoterArea((Item) cmb_voter_area.getSelectedItem() != null ? ((Item) cmb_voter_area.getSelectedItem()).getValue().toString() : "");

        //MISCELLANEOUS        

        String eduLevel = ((Item) cmb_education.getSelectedItem()).getValue().toString();
        applicationData.setEducationLevel(eduLevel);
        String profession = ((Item) cmb_profession.getSelectedItem()).getValue().toString();
        applicationData.setProfession(profession);
        String religion = ((Item) cmb_religion.getSelectedItem()).getValue().toString();
        applicationData.setReligion(religion);

        applicationData.setPhone(inp_telephone.getText());
        applicationData.setMobile(inp_mobile.getText());
        applicationData.setEmail(inp_email.getText());

        applicationData.setPassport(inp_passport.getText());
        applicationData.setTin(inp_tin_no.getText());
        applicationData.setDlNumber(inp_drv_license.getText());

        // ----------------- checkbox processing start ------------------------------

        //handicap
        //** any changes made to the handicap list string ("handiCapListStr") must also be implemented on the search
        String handiCapListStr = "";
        List<String> handiList = new ArrayList<String>();

        if (chk_handicap_amputant.isSelected()) {
            handiList.add("amputent");
        }
        if (chk_handicap_deaf.isSelected()) {
            handiList.add("deaf");
        }
        if (chk_handicap_mute.isSelected()) {
            handiList.add("mute");
        }
        if (chk_handicap_others.isSelected()) {
            handiList.add("others");
        }
        if (chk_handicap_speech.isSelected()) {
            handiList.add("speech");
        }
        if (chk_handicap_visual.isSelected()) {
            handiList.add("visual");
        }

        if (handiList.size() > 0) {
            handiCapListStr = handiList.get(0);
        }
        for (int i = 1; i < handiList.size(); i++) {
            handiCapListStr += "," + handiList.get(i);
        }
        applicationData.setHandicapInfo(handiCapListStr);
        applicationData.setHandicapRemarks(txt_handicap_remarks.getText());


        //less than ten finger
        if (chk_fp_not_ten_fingers.isSelected()) {
            applicationData.setFingerRemarks(inp_remark_fp.getText());
        } else {
            applicationData.setFingerRemarks("");
        }

        // ----------------- checkbox processing finish ------------------------------

    }

    @Override
    public boolean isDataValid() throws Exception {

        boolean isValidData = false;
//        errorFields = new ArrayList<String>();
        errorFieldsMap = new HashMap<String, Boolean>();

        if (applicationData == null) {
            return isValidData;
        }

        Enrollment enrollment = new Enrollment();
        errorFieldsMap = enrollment.validateApplicationData(applicationData);

        if (errorFieldsMap == null) {
            isValidData = false;
        } else {

            int err_count = 0;

            for (Map.Entry<String, Boolean> current_field : errorFieldsMap.entrySet()) {
//                System.out.println("Key : " + current_field.getKey() + " , Value : " + current_field.getValue());

                if (current_field.getKey().equalsIgnoreCase(Defs.NAME_BNG)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_name_bangla);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_name_bangla, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.NAME_ENG)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_name_english);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_name_english, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.GENDER)) {
                    if (current_field.getValue()) {
                        rdo_gender_male.setBorderPainted(true);
                        rdo_gender_male.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(errorFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
                        rdo_gender_female.setBorderPainted(true);
                        rdo_gender_female.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(errorFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
                        rdo_gender_third.setBorderPainted(true);
                        rdo_gender_third.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(errorFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
                        err_count++;
                    } else {
                        rdo_gender_male.setBorderPainted(false);
                        rdo_gender_male.setBorder(null);
                        rdo_gender_female.setBorderPainted(false);
                        rdo_gender_female.setBorder(null);
                        rdo_gender_third.setBorderPainted(false);
                        rdo_gender_third.setBorder(null);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.FATHER_NAME)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_name_father);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_name_father, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.MOTHER_NAME)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_name_mother);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_name_mother, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.SPOUSE_NAME)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_name_spouse);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_name_spouse, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.FATHER_NID)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_father_nid);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_father_nid, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.MOTHER_NID)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_mother_nid);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_mother_nid, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.SPOUSE_NID)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_spouse_nid);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_spouse_nid, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.MARITAL_STATUS)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_marital_status);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_marital_status, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.NATIONAL_ID)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_nid);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_nid, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PIN_NO)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_nid_old);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_nid_old, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.NID_ISSUE_DATE)) {
                    if (current_field.getValue()) {
                        setErrorCalField(cal_nid_issue_date);
                        err_count++;
                    } else {
                        setDefaultCalField(cal_nid_issue_date, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.DATE_OF_BIRTH)) {
                    if (current_field.getValue()) {
                        setErrorCalField(cal_date_of_birth);
                        err_count++;
                    } else {
                        setDefaultCalField(cal_date_of_birth, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.BIRTH_DISTRICT)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_birth_place_district);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_birth_place_district, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.BIRTH_REGISTRATION_NO)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_birth_registration_no);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_birth_registration_no, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.NATIONALITY)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_nationality);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_nationality, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.BLOOD_GROUP)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_blood_grp);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_blood_grp, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_DIVISION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_division);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_division, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_DISTRICT)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_district);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_district, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_UPOZILA)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_upozila);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_upozila, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_RMO)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_rmo);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_rmo, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_CITY_CORPORATION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_city);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_city, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_EUNION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_eunion);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_eunion, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_MOUZA)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_mouza);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_mouza, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_MOUZA_OTHER)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_present_mouza_otr);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_present_mouza_otr, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_VILLAGE)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_village);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_village, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_VILLAGE_OTHER)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_present_village_otr);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_present_village_otr, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_HOUSE)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_present_house);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_present_house, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_POSTOFFICE)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_present_postoffice);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_present_postoffice, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PRESENT_ADDRESS_POSTCODE)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_present_postcode);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_present_postcode, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_DIVISION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_division);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_division, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_DISTRICT)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_district);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_district, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_UPOZILA)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_upozila);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_upozila, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_RMO)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_rmo);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_rmo, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_CITY_CORPORATION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_city);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_city, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_EUNION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_eunion);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_eunion, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_MOUZA)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_mouza);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_mouza, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_MOUZA_OTHER)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_permanent_mouza_otr);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_permanent_mouza_otr, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_VILLAGE)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_village);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_village, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_VILLAGE_OTHER)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_permanent_village_otr);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_permanent_village_otr, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_HOUSE)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_permanent_house);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_permanent_house, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_POSTOFFICE)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_permanent_postoffice);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_permanent_postoffice, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PERMANENT_ADDRESS_POSTCODE)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_permanent_postcode);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_permanent_postcode, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.VOTER_AT)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_voter_at);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_voter_at, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.VOTER_AREA)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_voter_area);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_voter_area, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.EDUCATION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_education);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_education, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.PROFESSION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_profession);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_profession, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.RELIGION)) {
                    if (current_field.getValue()) {
                        setErrorComboBox(cmb_religion);
                        err_count++;
                    } else {
                        setDefaultComboBox(cmb_religion, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.TELEPHONE)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_telephone);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_telephone, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.MOBILE)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_mobile);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_mobile, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.EMAIL)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_email);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_email, false);
                    }
                } else if (current_field.getKey().equalsIgnoreCase(Defs.TIN_NO)) {
                    if (current_field.getValue()) {
                        setErrorTextField(inp_tin_no);
                        err_count++;
                    } else {
                        setDefaultTextField(inp_tin_no, false);
                    }
                }
            }
//            System.out.println("Error Count : " + err_count);

            if (err_count == 0) {
                isValidData = true;
            }
        }

        return isValidData;
    }

    @Override
    public void dataReady() throws Exception {
        PersonManagerBean pmb=new PersonManagerBean();
        AddBioPersonResponse resp = new AddBioPersonResponse();

        BioPerson bioPersonBO = new BioPerson();
        BioBiometric bioBiometric = new BioBiometric();

        // ----------------- Set all BioPerson data from client bean Applicationdata -----------------
        
        // PERSON ID
        bioPersonBO.setId(applicationData.getId());
        
        // PERSONAL DETAILS
        bioPersonBO.setNameBn(applicationData.getNameBn());
        bioPersonBO.setNameEn(applicationData.getNameEn());

        bioPersonBO.setGender(applicationData.getGender());

        bioPersonBO.setFatherName(applicationData.getFatherName());
        bioPersonBO.setFatherNid(applicationData.getFatherNid());

        bioPersonBO.setMotherName(applicationData.getMotherName());
        bioPersonBO.setMotherNid(applicationData.getMotherNid());

        bioPersonBO.setSpouseName(applicationData.getSpouseName());
        bioPersonBO.setSpouseNid(applicationData.getSpouseNid());
        bioPersonBO.setMaritalStatus(applicationData.getMaritalStatus());

        // CITYZENSHIP DETAILS
        bioPersonBO.setNidNumber(applicationData.getNidNumber());
        bioPersonBO.setNidIssueDate(applicationData.getNidIssueDate());
        bioPersonBO.setPinNo(applicationData.getPinNo());

        bioPersonBO.setBirthDistrict(applicationData.getBirthDistrict());
        bioPersonBO.setDateOfBirth(applicationData.getDateOfBirth());
        bioPersonBO.setNationality(applicationData.getNationality());

        bioPersonBO.setBirthRegistrationNumber(applicationData.getBirthRegistrationNumber());
        bioPersonBO.setBloodGroup(applicationData.getBloodGroup());

        bioPersonBO.setUniqueIdentificationMark(applicationData.getUniqueIdentificationMark());

        // PRESENT ADDRESS
        bioPersonBO.setPresentDivision(applicationData.getPresentDivision());
        bioPersonBO.setPresentDistrict(applicationData.getPresentDistrict());
        bioPersonBO.setPresentUpozila(applicationData.getPresentUpozila());
        bioPersonBO.setPresentRmo(applicationData.getPresentRmo());

        bioPersonBO.setPresentCity(applicationData.getPresentCity());
        bioPersonBO.setPresentEunion(applicationData.getPresentEunion());
        bioPersonBO.setPresentPostOffice(applicationData.getPresentPostOffice());
        bioPersonBO.setPresentPostCode(applicationData.getPresentPostCode());

        bioPersonBO.setPresentMouza(applicationData.getPresentMouza());
        bioPersonBO.setPresentMouzaOtr(applicationData.getPresentMouzaOtr());
        bioPersonBO.setPresentVillage(applicationData.getPresentVillage());
        bioPersonBO.setPresentVillageOtr(applicationData.getPresentVillageOtr());

        bioPersonBO.setPresentHouseNo(applicationData.getPresentHouseNo());

        // PERMANENT ADDRESS
        bioPersonBO.setPermDivision(applicationData.getPermDivision());
        bioPersonBO.setPermDistrict(applicationData.getPermDistrict());
        bioPersonBO.setPermUpozila(applicationData.getPermUpozila());
        bioPersonBO.setPermanentRmo(applicationData.getPermanentRmo());

        bioPersonBO.setPermanentCity(applicationData.getPermanentCity());
        bioPersonBO.setPermanentEunion(applicationData.getPermanentEunion());
        bioPersonBO.setPermanentPostOffice(applicationData.getPermanentPostOffice());
        bioPersonBO.setPermanentPostCode(applicationData.getPermanentPostCode());

        bioPersonBO.setPermanentMouza(applicationData.getPermanentMouza());
        bioPersonBO.setPermanentMouzaOtr(applicationData.getPermanentMouzaOtr());
        bioPersonBO.setPermanentVillage(applicationData.getPermanentVillage());
        bioPersonBO.setPermanentVillageOtr(applicationData.getPermanentVillageOtr());

        bioPersonBO.setPermanentHouseNo(applicationData.getPermanentHouseNo());

        // VOTER AREA
        bioPersonBO.setVoterAt(applicationData.getVoterAt());
        bioPersonBO.setVoterArea(applicationData.getVoterArea());

        //MISCELLANEOUS
        bioPersonBO.setEducationLevel(applicationData.getEducationLevel());
        bioPersonBO.setProfession(applicationData.getProfession());
        bioPersonBO.setReligion(applicationData.getReligion());

        bioPersonBO.setPhone(applicationData.getPhone());
        bioPersonBO.setMobile(applicationData.getMobile());
        bioPersonBO.setEmail(applicationData.getEmail());

        bioPersonBO.setPassport(applicationData.getPassport());
        bioPersonBO.setTin(applicationData.getTin());
        bioPersonBO.setDlNumber(applicationData.getDlNumber());

        // ----------------- checkbox processing start ------------------------------

        //HANDICAP
        bioPersonBO.setHandicapInfo(applicationData.getHandicapInfo());
        bioPersonBO.setHandicapRemarks(applicationData.getHandicapRemarks());

        // ----------------- Set all BioMetric data from client bean Applicationdata -----------------
        
        // BIOMATRIC ID
        bioBiometric.setId(applicationData.getBiometricId());
        
        // PHOTO
        bioBiometric.setPhoto(applicationData.getPhoto());
        
        // SIGNATURE
        bioBiometric.setSignature(applicationData.getSignature());
        
        // RIGHT HAND FINGER PRINT
        bioBiometric.setWsqRt(applicationData.getWsqRt());
        bioBiometric.setWsqRi(applicationData.getWsqRi());
        bioBiometric.setWsqRm(applicationData.getWsqRm());
        bioBiometric.setWsqRr(applicationData.getWsqRr());
        bioBiometric.setWsqRl(applicationData.getWsqRl());
        
        // LEFT HAND FINGER PRINT
        bioBiometric.setWsqLt(applicationData.getWsqLt());
        bioBiometric.setWsqLi(applicationData.getWsqLi());
        bioBiometric.setWsqLm(applicationData.getWsqLm());
        bioBiometric.setWsqLr(applicationData.getWsqLr());
        bioBiometric.setWsqLl(applicationData.getWsqLl());
        
        // FINGER REMARKS
        bioBiometric.setFingerRemarks(applicationData.getFingerRemarks());
        
        // LEFT EYE
        bioBiometric.setEyeLeft(applicationData.getLeft_eye());
        
        // RIGHT EYE
        bioBiometric.setEyeRight(applicationData.getRight_eye());

        bioPersonBO.setBiometric(bioBiometric);
        resp = pmb.insertUpdatePerson(bioPersonBO);
        
        System.err.println("GetBioMetric -> " +bioPersonBO.getBiometric());
        if (resp.isOperationStatus() && !resp.isDataUpdateStatus() ) {
            applicationData.setId(resp.getBioPerson().getId());
            pmb.deleteAndInsertAttachment(applicationData);
            applicationData = new ApplicationData();

            resetEnrollmentApplication();
            Utils.showSuccessMsg("Data Saved Successfully");
        } 
        else if ( resp.isDataUpdateStatus() ) {
            Utils.showSuccessMsg("Data Update Sucessfully");
        }
        else {
            Utils.showErrorMsg("Failed To SAve");
        }
        //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void dataError() throws Exception {

        showErrorDialog();

    }

    private void setErrorTextField(JTextField field) {
        field.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(errorFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
    }

    private void setErrorCalField(com.toedter.calendar.JDateChooser field) {
        field.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(errorFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
    }

    private void setErrorComboBox(JComboBox comboBox) {
        comboBox.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(errorFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
    }

    private void setDefaultTextField(JTextField field, boolean isReset) {
        if (isReset) {
            field.setText("");
        }
        field.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(defaultFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
    }

    private void setDefaultCalField(com.toedter.calendar.JDateChooser field, boolean isReset) {
        if (isReset) {
            field.setCalendar(null);
        }
        field.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(defaultFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
    }

    private void setDefaultComboBox(JComboBox comboBox, boolean isReset) {

        if (isReset) {
            if (comboBox.getItemCount() != 0) {
                comboBox.setSelectedIndex(0);
            }
        }
        comboBox.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(defaultFieldBorderColor, 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
    }

    private void showErrorDialog() {
        JOptionPane.showMessageDialog(this, "Application form contains error", "VALIDATION ERROR", JOptionPane.ERROR_MESSAGE);
    }
}
